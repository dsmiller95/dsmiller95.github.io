{"version":3,"sources":["webpack:///./src/components/tag-list/tag-list.module.less","webpack:///./src/components/button/button.js","webpack:///./src/components/post-list/post-list.module.less","webpack:///./src/components/archive-pagination/archive-pagination.js","webpack:///./src/templates/archive/archive.js","webpack:///./src/components/tag-list/tag-list.js","webpack:///./src/components/post-list/post-list.js","webpack:///./src/components/button/button.module.less","webpack:///./src/components/archive-pagination/archive-pagination.module.less"],"names":["module","exports","Button","children","to","buttonStyle","className","style","button","defaultProps","ArchivePagination","prevPage","nextPage","container","Utils","resolvePageUrl","Config","pages","archive","buttonLeft","buttonRight","query","Archive","data","pageContext","archivePage","lastArchivePage","title","description","path","posts","allMdx","edges","TagList","tags","filter","tag","index","indexOf","sort","map","tagPageUrl","tagData","console","error","key","name","capitalize","PostList","post","node","frontmatter","date","cover","excerpt","hidden","fluid","childImageSharp","alt","content","x"],"mappings":"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","file":"component---src-templates-archive-archive-js-9db44091dd6b810dc5b3.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tags\":\"tag-list-module--tags--O_Obx\"};","/* Vendor imports */\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\n/* App imports */\r\nimport style from './button.module.less'\r\n\r\nconst Button = ({ children, to, buttonStyle }) => (\r\n  <Link to={to} className={`${style.button} ${buttonStyle}`}>\r\n    {children}\r\n  </Link>\r\n)\r\n\r\nButton.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  to: PropTypes.string.isRequired,\r\n  buttonStyle: PropTypes.string,\r\n}\r\n\r\nButton.defaultProps = {\r\n  buttonStyle: '',\r\n}\r\n\r\nexport default Button\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"post-list-module--container--2AqiX\",\"post\":\"post-list-module--post--1gkyY\",\"cover\":\"post-list-module--cover--31q1n\",\"content\":\"post-list-module--content--ixjr-\"};","/* Vendor imports */\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { FaArrowLeft, FaArrowRight } from 'react-icons/fa'\r\n/* App imports */\r\nimport Button from '../../components/button'\r\nimport Config from '../../../config'\r\nimport Utils from '../../utils'\r\nimport style from './archive-pagination.module.less'\r\n\r\nconst ArchivePagination = ({ prevPage, nextPage }) => (\r\n  <div className={style.container}>\r\n    {prevPage ? (\r\n      <Button\r\n        to={Utils.resolvePageUrl(Config.pages.archive, prevPage)}\r\n        buttonStyle={style.buttonLeft}\r\n      >\r\n        <FaArrowLeft />\r\n        <span>Newer posts</span>\r\n      </Button>\r\n    ) : null}\r\n    {nextPage ? (\r\n      <Button\r\n        to={Utils.resolvePageUrl(Config.pages.archive, nextPage)}\r\n        buttonStyle={style.buttonRight}\r\n      >\r\n        <span>Older posts</span>\r\n        <FaArrowRight />\r\n      </Button>\r\n    ) : null}\r\n  </div>\r\n)\r\n\r\nArchivePagination.propTypes = {\r\n  prevPage: PropTypes.number,\r\n  nextPage: PropTypes.number,\r\n}\r\n\r\nexport default ArchivePagination\r\n","/* Vendor imports */\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { graphql } from 'gatsby'\r\n/* App imports */\r\nimport Layout from '../../components/layout'\r\nimport SEO from '../../components/seo'\r\nimport PostList from '../../components/post-list'\r\nimport ArchivePagination from '../../components/archive-pagination'\r\nimport Config from '../../../config'\r\n\r\nconst Archive = ({ data, pageContext }) => {\r\n  const { archivePage, lastArchivePage } = pageContext\r\n  const prevPage = archivePage > 1 ? archivePage - 1 : null\r\n  const nextPage = archivePage < lastArchivePage ? archivePage + 1 : null;\r\n  return (\r\n    <Layout title=\"Archive\">\r\n      <SEO\r\n        title={`Archive | Page ${archivePage}`}\r\n        description=\"Old posts\"\r\n        path={Config.pages.archive}\r\n      />\r\n      <PostList posts={data.allMdx.edges} />\r\n      <ArchivePagination prevPage={prevPage} nextPage={nextPage} />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nArchive.propTypes = {\r\n  data: PropTypes.shape({\r\n    allMdx: PropTypes.shape({\r\n      edges: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n  pageContext: PropTypes.shape({\r\n    archivePage: PropTypes.number.isRequired,\r\n    lastArchivePage: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n}\r\n\r\nexport const query = graphql`\r\n  query($postPaths: [String!]) {\r\n    allMdx(\r\n      filter: {\r\n        frontmatter: { path: { in: $postPaths } }\r\n        fileAbsolutePath: { regex: \"/index.mdx?$/\" }\r\n      }\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n    ) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            path\r\n            title\r\n            tags\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n            excerpt\r\n            hidden\r\n            cover {\r\n              childImageSharp {\r\n                fluid(maxWidth: 600) {\r\n                  ...GatsbyImageSharpFluid_tracedSVG\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default Archive\r\n","/* Vendor imports */\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\n/* App imports */\r\nimport style from './tag-list.module.less'\r\nimport Config from '../../../config'\r\nimport Utils from '../../utils'\r\n\r\nconst TagList = ({ tags }) => (\r\n  <div className={style.tags}>\r\n    {tags\r\n      .filter((tag, index) => index === tags.indexOf(tag)) // Remove duplicate values\r\n      .sort()\r\n      .map(tag => {\r\n        const tagPageUrl = Utils.resolvePageUrl(Config.pages.tag, tag);\r\n        const tagData = Config.tags[tag]\r\n        if (!tagData) {\r\n          console.error(`Tag data for ${tag} not found`)\r\n        }\r\n\r\n        return (\r\n          <Link to={tagPageUrl} key={tag}>\r\n            {tagData?.name || Utils.capitalize(tag)} \r\n          </Link>\r\n      )})\r\n      }\r\n  </div>\r\n)\r\n\r\nTagList.propTypes = {\r\n  tags: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n}\r\n\r\nexport default TagList\r\n","/* Vendor imports */\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\nimport Img from 'gatsby-image'\r\n/* App imports */\r\nimport style from './post-list.module.less'\r\nimport TagList from '../tag-list'\r\nimport Utils from '../../utils'\r\n\r\nconst PostList = ({ posts }) => (\r\n  <div className={style.container}>\r\n    {posts.map((post, index) => {\r\n      const { title, date, path, tags, cover, excerpt, hidden } = post.node.frontmatter\r\n      if (hidden) {\r\n        return null\r\n      }\r\n      return (\r\n        <div key={title} className={style.post}>\r\n          <div className={style.cover}>\r\n            <Link to={Utils.resolvePageUrl(path)}>\r\n              <Img\r\n                fluid={cover.childImageSharp.fluid}\r\n                title={excerpt}\r\n                alt={title}\r\n              />\r\n            </Link>\r\n          </div>\r\n          <div className={style.content}>\r\n            <Link to={Utils.resolvePageUrl(path)}>\r\n              {date ? <label>{date}</label> : null}\r\n              <h2>{title}</h2>\r\n              <p>{excerpt}</p>\r\n            </Link>\r\n            <TagList tags={tags} />\r\n          </div>\r\n        </div>\r\n      )\r\n    }).filter(x => x != null)}\r\n  </div>\r\n)\r\n\r\nPostList.propTypes = {\r\n  posts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      node: PropTypes.shape({\r\n        frontmatter: PropTypes.shape({\r\n          title: PropTypes.string.isRequired,\r\n          date: PropTypes.string,\r\n          path: PropTypes.string.isRequired,\r\n          tags: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n          cover: PropTypes.shape({\r\n            childImageSharp: PropTypes.shape({\r\n              fluid: PropTypes.object.isRequired,\r\n            }).isRequired,\r\n          }).isRequired,\r\n          hidden: PropTypes.bool,\r\n        }),\r\n      }),\r\n    })\r\n  ),\r\n}\r\n\r\nexport default PostList\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"button-module--button--24AQQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"archive-pagination-module--container--2VM7Y\",\"buttonLeft\":\"archive-pagination-module--buttonLeft--3CRS6\",\"buttonRight\":\"archive-pagination-module--buttonRight--Wnali\"};"],"sourceRoot":""}
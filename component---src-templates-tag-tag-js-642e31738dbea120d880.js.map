{"version":3,"sources":["webpack:///./src/components/tag-list/tag-list.module.less","webpack:///./src/templates/tag/tag.js","webpack:///./src/components/post-list/post-list.module.less","webpack:///./src/components/tag-list/tag-list.js","webpack:///./src/components/post-list/post-list.js","webpack:///./src/templates/tag/tag.module.less"],"names":["module","exports","pageQuery","TagPage","data","tag","pageContext","tagData","Config","tags","console","error","tagName","name","Utils","capitalize","tagPagePath","pages","tageImageAsset","allFile","edges","find","edge","node","title","description","path","resolvePageUrl","keywords","className","style","heading","cover","fluid","childImageSharp","posts","allMdx","TagList","filter","index","indexOf","sort","map","tagPageUrl","to","key","PostList","container","post","frontmatter","date","excerpt","alt","content"],"mappings":"iFACAA,EAAOC,QAAU,CAAC,KAAO,iC,8OCqEZC,EAAS,aA2CPC,UApGC,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KACXC,EADmC,EAAlBC,YACCD,IAClBE,EAAUC,IAAOC,KAAKJ,GACvBE,GACHG,QAAQC,MAAR,gBAA8BN,EAA9B,cAEF,IAAMO,GAAUL,aAAA,EAAAA,EAASM,OAAQC,IAAMC,WAAWV,GAC5CW,EAAcR,IAAOS,MAAMZ,IAC3Ba,EAAiBd,EAAKe,QAAQC,MAAMC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,KAAKV,OAASR,KAK1E,OAJKa,GACHR,QAAQC,MAAR,iBAA+BN,EAA/B,cAIA,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEmB,MAAOZ,EACPa,YAAW,kBAAoBb,EAC/Bc,KAAMZ,IAAMa,eAAeX,EAAaX,GACxCuB,SAAU,CAAChB,KAEb,yBAAKiB,UAAWC,IAAMC,SACpB,6BACE,4BAAKnB,IAEP,yBAAKiB,UAAWC,IAAME,OACnBd,EAAiB,kBAAC,IAAD,CAAKe,MAAOf,EAAeK,KAAKW,gBAAgBD,QAAY,gCAGlF,kBAAC,IAAD,CAAUE,MAAO/B,EAAKgC,OAAOhB,W,qBCzCnCpB,EAAOC,QAAU,CAAC,UAAY,qCAAqC,KAAO,gCAAgC,MAAQ,iCAAiC,QAAU,qC,kLCiC9IoC,EAzBC,SAAC,GAAD,IAAG5B,EAAH,EAAGA,KAAH,OACd,yBAAKoB,UAAWC,IAAMrB,MACnBA,EACE6B,QAAO,SAACjC,EAAKkC,GAAN,OAAgBA,IAAU9B,EAAK+B,QAAQnC,MAC9CoC,OACAC,KAAI,SAAArC,GACH,IAAMsC,EAAa7B,IAAMa,eAAenB,IAAOS,MAAMZ,IAAKA,GACpDE,EAAUC,IAAOC,KAAKJ,GAK5B,OAJKE,GACHG,QAAQC,MAAR,gBAA8BN,EAA9B,cAIA,kBAAC,OAAD,CAAMuC,GAAID,EAAYE,IAAKxC,IACxBE,aAAA,EAAAA,EAASM,OAAQC,IAAMC,WAAWV,U,oLCoChCyC,EAjDE,SAAC,GAAD,IAAGX,EAAH,EAAGA,MAAH,OACf,yBAAKN,UAAWC,IAAMiB,WACnBZ,EAAMO,KAAI,SAACM,EAAMT,GAAW,IAAD,EAC0BS,EAAKzB,KAAK0B,YAAtDzB,EADkB,EAClBA,MAAO0B,EADW,EACXA,KAAMxB,EADK,EACLA,KAAMjB,EADD,EACCA,KAAMuB,EADP,EACOA,MAAOmB,EADd,EACcA,QACxC,OACE,yBAAKN,IAAKrB,EAAOK,UAAWC,IAAMkB,MAChC,yBAAKnB,UAAWC,IAAME,OACpB,kBAAC,OAAD,CAAMY,GAAI9B,IAAMa,eAAeD,IAC7B,kBAAC,IAAD,CACEO,MAAOD,EAAME,gBAAgBD,MAC7BT,MAAO2B,EACPC,IAAK5B,MAIX,yBAAKK,UAAWC,IAAMuB,SACpB,kBAAC,OAAD,CAAMT,GAAI9B,IAAMa,eAAeD,IAC5BwB,EAAO,+BAAQA,GAAgB,KAChC,4BAAK1B,GACL,2BAAI2B,IAEN,kBAAC,IAAD,CAAS1C,KAAMA,Y,qBC9B3BT,EAAOC,QAAU,CAAC,QAAU,6BAA6B,MAAQ","file":"component---src-templates-tag-tag-js-642e31738dbea120d880.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tags\":\"tag-list-module--tags--O_Obx\"};","/* Vendor imports */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\nimport Img from 'gatsby-image'\n/* App imports */\nimport Layout from '../../components/layout'\nimport SEO from '../../components/seo'\nimport PostList from '../../components/post-list'\nimport style from './tag.module.less'\nimport Config from '../../../config'\nimport Utils from '../../utils'\n\nconst TagPage = ({ data, pageContext }) => {\n  const tag = pageContext.tag\n  const tagData = Config.tags[tag];\n  if (!tagData) {\n    console.error(`Tag data for ${tag} not found`);\n  }\n  const tagName = tagData?.name || Utils.capitalize(tag)\n  const tagPagePath = Config.pages.tag\n  const tageImageAsset = data.allFile.edges.find(edge => edge.node.name === tag);\n  if (!tageImageAsset) {\n    console.error(`Tag image for ${tag} not found`);\n  }\n  \n  return (\n    <Layout>\n      <SEO\n        title={tagName}\n        description={`All post about ${tagName}`}\n        path={Utils.resolvePageUrl(tagPagePath, tag)}\n        keywords={[tagName]}\n      />\n      <div className={style.heading}>\n        <div>\n          <h1>{tagName}</h1>\n        </div>\n        <div className={style.cover}>\n          {tageImageAsset ? <Img fluid={tageImageAsset.node.childImageSharp.fluid} /> : <div />}\n        </div>\n      </div>\n      <PostList posts={data.allMdx.edges} />\n    </Layout>\n  )\n}\n\nTagPage.propTypes = {\n  data: PropTypes.shape({\n    allMdx: PropTypes.shape({\n      edges: PropTypes.arrayOf(PropTypes.object).isRequired,\n    }).isRequired,\n    allFile: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            name: PropTypes.string.isRequired,\n            childImageSharp: PropTypes.shape({\n              fluid: PropTypes.object.isRequired,\n            }).isRequired,\n          }).isRequired,\n        })\n      ).isRequired,\n    }).isRequired,\n  }).isRequired,\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport const pageQuery = graphql`\n  query($tag: String!) {\n    allMdx(\n      filter: {\n        frontmatter: { tags: { in: [$tag] } }\n        fileAbsolutePath: { regex: \"/index.mdx?$/\" }\n      }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            tags\n            excerpt\n            cover {\n              childImageSharp {\n                fluid(maxWidth: 600) {\n                  ...GatsbyImageSharpFluid_tracedSVG\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    allFile(filter: { name: { eq: $tag }, dir: { regex: \"/tags$/\" } }) {\n      edges {\n        node {\n          name\n          childImageSharp {\n            fluid(maxHeight: 200) {\n              ...GatsbyImageSharpFluid_tracedSVG\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default TagPage\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"post-list-module--container--2AqiX\",\"post\":\"post-list-module--post--1gkyY\",\"cover\":\"post-list-module--cover--31q1n\",\"content\":\"post-list-module--content--ixjr-\"};","/* Vendor imports */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\n/* App imports */\nimport style from './tag-list.module.less'\nimport Config from '../../../config'\nimport Utils from '../../utils'\n\nconst TagList = ({ tags }) => (\n  <div className={style.tags}>\n    {tags\n      .filter((tag, index) => index === tags.indexOf(tag)) // Remove duplicate values\n      .sort()\n      .map(tag => {\n        const tagPageUrl = Utils.resolvePageUrl(Config.pages.tag, tag);\n        const tagData = Config.tags[tag]\n        if (!tagData) {\n          console.error(`Tag data for ${tag} not found`)\n        }\n\n        return (\n          <Link to={tagPageUrl} key={tag}>\n            {tagData?.name || Utils.capitalize(tag)} \n          </Link>\n      )})\n      }\n  </div>\n)\n\nTagList.propTypes = {\n  tags: PropTypes.arrayOf(PropTypes.string).isRequired,\n}\n\nexport default TagList\n","/* Vendor imports */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\nimport Img from 'gatsby-image'\n/* App imports */\nimport style from './post-list.module.less'\nimport TagList from '../tag-list'\nimport Utils from '../../utils'\n\nconst PostList = ({ posts }) => (\n  <div className={style.container}>\n    {posts.map((post, index) => {\n      const { title, date, path, tags, cover, excerpt } = post.node.frontmatter\n      return (\n        <div key={title} className={style.post}>\n          <div className={style.cover}>\n            <Link to={Utils.resolvePageUrl(path)}>\n              <Img\n                fluid={cover.childImageSharp.fluid}\n                title={excerpt}\n                alt={title}\n              />\n            </Link>\n          </div>\n          <div className={style.content}>\n            <Link to={Utils.resolvePageUrl(path)}>\n              {date ? <label>{date}</label> : null}\n              <h2>{title}</h2>\n              <p>{excerpt}</p>\n            </Link>\n            <TagList tags={tags} />\n          </div>\n        </div>\n      )\n    })}\n  </div>\n)\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      node: PropTypes.shape({\n        frontmatter: PropTypes.shape({\n          title: PropTypes.string.isRequired,\n          date: PropTypes.string,\n          path: PropTypes.string.isRequired,\n          tags: PropTypes.arrayOf(PropTypes.string).isRequired,\n          cover: PropTypes.shape({\n            childImageSharp: PropTypes.shape({\n              fluid: PropTypes.object.isRequired,\n            }).isRequired,\n          }).isRequired,\n        }),\n      }),\n    })\n  ),\n}\n\nexport default PostList\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"tag-module--heading--3GEiu\",\"cover\":\"tag-module--cover--31Edu\"};"],"sourceRoot":""}
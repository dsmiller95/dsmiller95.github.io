{"version":3,"sources":["webpack:///./src/components/tag-list/tag-list.module.less","webpack:///./src/templates/tag/tag.js","webpack:///./src/components/post-list/post-list.module.less","webpack:///./src/components/tag-list/tag-list.js","webpack:///./src/components/post-list/post-list.js","webpack:///./src/templates/tag/tag.module.less"],"names":["module","exports","pageQuery","TagPage","data","tag","pageContext","tagData","Config","tags","console","error","tagName","name","Utils","capitalize","tagPagePath","pages","tageImageAsset","allFile","edges","find","edge","node","title","description","path","resolvePageUrl","keywords","className","style","heading","cover","fluid","childImageSharp","posts","allMdx","TagList","filter","index","indexOf","sort","map","tagPageUrl","to","key","PostList","container","post","frontmatter","date","excerpt","hidden","alt","content","x"],"mappings":"iFACAA,EAAOC,QAAU,CAAC,KAAO,iC,8OCqEZC,EAAS,UA4CPC,UArGC,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KACXC,EADmC,EAAlBC,YACCD,IAClBE,EAAUC,IAAOC,KAAKJ,GACvBE,GACHG,QAAQC,MAAR,gBAA8BN,EAA9B,cAEF,IAAMO,GAAUL,aAAA,EAAAA,EAASM,OAAQC,IAAMC,WAAWV,GAC5CW,EAAcR,IAAOS,MAAMZ,IAC3Ba,EAAiBd,EAAKe,QAAQC,MAAMC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,KAAKV,OAASR,KAK1E,OAJKa,GACHR,QAAQC,MAAR,iBAA+BN,EAA/B,cAIA,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEmB,MAAOZ,EACPa,YAAW,kBAAoBb,EAC/Bc,KAAMZ,IAAMa,eAAeX,EAAaX,GACxCuB,SAAU,CAAChB,KAEb,yBAAKiB,UAAWC,IAAMC,SACpB,6BACE,4BAAKnB,IAEP,yBAAKiB,UAAWC,IAAME,OACnBd,EAAiB,kBAAC,IAAD,CAAKe,MAAOf,EAAeK,KAAKW,gBAAgBD,QAAY,gCAGlF,kBAAC,IAAD,CAAUE,MAAO/B,EAAKgC,OAAOhB,W,qBCzCnCpB,EAAOC,QAAU,CAAC,UAAY,qCAAqC,KAAO,gCAAgC,MAAQ,iCAAiC,QAAU,qC,kLCiC9IoC,EAzBC,SAAC,GAAD,IAAG5B,EAAH,EAAGA,KAAH,OACd,yBAAKoB,UAAWC,IAAMrB,MACnBA,EACE6B,QAAO,SAACjC,EAAKkC,GAAN,OAAgBA,IAAU9B,EAAK+B,QAAQnC,MAC9CoC,OACAC,KAAI,SAAArC,GACH,IAAMsC,EAAa7B,IAAMa,eAAenB,IAAOS,MAAMZ,IAAKA,GACpDE,EAAUC,IAAOC,KAAKJ,GAK5B,OAJKE,GACHG,QAAQC,MAAR,gBAA8BN,EAA9B,cAIA,kBAAC,OAAD,CAAMuC,GAAID,EAAYE,IAAKxC,IACxBE,aAAA,EAAAA,EAASM,OAAQC,IAAMC,WAAWV,U,oLCwChCyC,EArDE,SAAC,GAAD,IAAGX,EAAH,EAAGA,MAAH,OACf,yBAAKN,UAAWC,IAAMiB,WACnBZ,EAAMO,KAAI,SAACM,EAAMT,GAAW,IAAD,EACkCS,EAAKzB,KAAK0B,YAA9DzB,EADkB,EAClBA,MAAO0B,EADW,EACXA,KAAMxB,EADK,EACLA,KAAMjB,EADD,EACCA,KAAMuB,EADP,EACOA,MAAOmB,EADd,EACcA,QACxC,OAF0B,EACuBC,OAExC,KAGP,yBAAKP,IAAKrB,EAAOK,UAAWC,IAAMkB,MAChC,yBAAKnB,UAAWC,IAAME,OACpB,kBAAC,OAAD,CAAMY,GAAI9B,IAAMa,eAAeD,IAC7B,kBAAC,IAAD,CACEO,MAAOD,EAAME,gBAAgBD,MAC7BT,MAAO2B,EACPE,IAAK7B,MAIX,yBAAKK,UAAWC,IAAMwB,SACpB,kBAAC,OAAD,CAAMV,GAAI9B,IAAMa,eAAeD,IAC5BwB,EAAO,+BAAQA,GAAgB,KAChC,4BAAK1B,GACL,2BAAI2B,IAEN,kBAAC,IAAD,CAAS1C,KAAMA,SAIpB6B,QAAO,SAAAiB,GAAC,OAAS,MAALA,Q,qBCrCnBvD,EAAOC,QAAU,CAAC,QAAU,6BAA6B,MAAQ","file":"component---src-templates-tag-tag-js-70a6a657ae9586528316.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tags\":\"tag-list-module--tags--O_Obx\"};","/* Vendor imports */\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { graphql } from 'gatsby'\r\nimport Img from 'gatsby-image'\r\n/* App imports */\r\nimport Layout from '../../components/layout'\r\nimport SEO from '../../components/seo'\r\nimport PostList from '../../components/post-list'\r\nimport style from './tag.module.less'\r\nimport Config from '../../../config'\r\nimport Utils from '../../utils'\r\n\r\nconst TagPage = ({ data, pageContext }) => {\r\n  const tag = pageContext.tag\r\n  const tagData = Config.tags[tag];\r\n  if (!tagData) {\r\n    console.error(`Tag data for ${tag} not found`);\r\n  }\r\n  const tagName = tagData?.name || Utils.capitalize(tag)\r\n  const tagPagePath = Config.pages.tag\r\n  const tageImageAsset = data.allFile.edges.find(edge => edge.node.name === tag);\r\n  if (!tageImageAsset) {\r\n    console.error(`Tag image for ${tag} not found`);\r\n  }\r\n  \r\n  return (\r\n    <Layout>\r\n      <SEO\r\n        title={tagName}\r\n        description={`All post about ${tagName}`}\r\n        path={Utils.resolvePageUrl(tagPagePath, tag)}\r\n        keywords={[tagName]}\r\n      />\r\n      <div className={style.heading}>\r\n        <div>\r\n          <h1>{tagName}</h1>\r\n        </div>\r\n        <div className={style.cover}>\r\n          {tageImageAsset ? <Img fluid={tageImageAsset.node.childImageSharp.fluid} /> : <div />}\r\n        </div>\r\n      </div>\r\n      <PostList posts={data.allMdx.edges} />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nTagPage.propTypes = {\r\n  data: PropTypes.shape({\r\n    allMdx: PropTypes.shape({\r\n      edges: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    }).isRequired,\r\n    allFile: PropTypes.shape({\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            name: PropTypes.string.isRequired,\r\n            childImageSharp: PropTypes.shape({\r\n              fluid: PropTypes.object.isRequired,\r\n            }).isRequired,\r\n          }).isRequired,\r\n        })\r\n      ).isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n  pageContext: PropTypes.shape({\r\n    tag: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n}\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String!) {\r\n    allMdx(\r\n      filter: {\r\n        frontmatter: { tags: { in: [$tag] } }\r\n        fileAbsolutePath: { regex: \"/index.mdx?$/\" }\r\n      }\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n    ) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            title\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n            path\r\n            tags\r\n            excerpt\r\n            hidden\r\n            cover {\r\n              childImageSharp {\r\n                fluid(maxWidth: 600) {\r\n                  ...GatsbyImageSharpFluid_tracedSVG\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    allFile(filter: { name: { eq: $tag }, dir: { regex: \"/tags$/\" } }) {\r\n      edges {\r\n        node {\r\n          name\r\n          childImageSharp {\r\n            fluid(maxHeight: 200) {\r\n              ...GatsbyImageSharpFluid_tracedSVG\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default TagPage\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"post-list-module--container--2AqiX\",\"post\":\"post-list-module--post--1gkyY\",\"cover\":\"post-list-module--cover--31q1n\",\"content\":\"post-list-module--content--ixjr-\"};","/* Vendor imports */\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\n/* App imports */\r\nimport style from './tag-list.module.less'\r\nimport Config from '../../../config'\r\nimport Utils from '../../utils'\r\n\r\nconst TagList = ({ tags }) => (\r\n  <div className={style.tags}>\r\n    {tags\r\n      .filter((tag, index) => index === tags.indexOf(tag)) // Remove duplicate values\r\n      .sort()\r\n      .map(tag => {\r\n        const tagPageUrl = Utils.resolvePageUrl(Config.pages.tag, tag);\r\n        const tagData = Config.tags[tag]\r\n        if (!tagData) {\r\n          console.error(`Tag data for ${tag} not found`)\r\n        }\r\n\r\n        return (\r\n          <Link to={tagPageUrl} key={tag}>\r\n            {tagData?.name || Utils.capitalize(tag)} \r\n          </Link>\r\n      )})\r\n      }\r\n  </div>\r\n)\r\n\r\nTagList.propTypes = {\r\n  tags: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n}\r\n\r\nexport default TagList\r\n","/* Vendor imports */\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\nimport Img from 'gatsby-image'\r\n/* App imports */\r\nimport style from './post-list.module.less'\r\nimport TagList from '../tag-list'\r\nimport Utils from '../../utils'\r\n\r\nconst PostList = ({ posts }) => (\r\n  <div className={style.container}>\r\n    {posts.map((post, index) => {\r\n      const { title, date, path, tags, cover, excerpt, hidden } = post.node.frontmatter\r\n      if (hidden) {\r\n        return null\r\n      }\r\n      return (\r\n        <div key={title} className={style.post}>\r\n          <div className={style.cover}>\r\n            <Link to={Utils.resolvePageUrl(path)}>\r\n              <Img\r\n                fluid={cover.childImageSharp.fluid}\r\n                title={excerpt}\r\n                alt={title}\r\n              />\r\n            </Link>\r\n          </div>\r\n          <div className={style.content}>\r\n            <Link to={Utils.resolvePageUrl(path)}>\r\n              {date ? <label>{date}</label> : null}\r\n              <h2>{title}</h2>\r\n              <p>{excerpt}</p>\r\n            </Link>\r\n            <TagList tags={tags} />\r\n          </div>\r\n        </div>\r\n      )\r\n    }).filter(x => x != null)}\r\n  </div>\r\n)\r\n\r\nPostList.propTypes = {\r\n  posts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      node: PropTypes.shape({\r\n        frontmatter: PropTypes.shape({\r\n          title: PropTypes.string.isRequired,\r\n          date: PropTypes.string,\r\n          path: PropTypes.string.isRequired,\r\n          tags: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n          cover: PropTypes.shape({\r\n            childImageSharp: PropTypes.shape({\r\n              fluid: PropTypes.object.isRequired,\r\n            }).isRequired,\r\n          }).isRequired,\r\n          hidden: PropTypes.bool,\r\n        }),\r\n      }),\r\n    })\r\n  ),\r\n}\r\n\r\nexport default PostList\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"tag-module--heading--3GEiu\",\"cover\":\"tag-module--cover--31Edu\"};"],"sourceRoot":""}
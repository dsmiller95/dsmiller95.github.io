{"version":3,"sources":["webpack:///./src/components/tag-list/tag-list.module.less","webpack:///./src/templates/tag/tag.js","webpack:///./src/components/post-list/post-list.module.less","webpack:///./src/components/tag-list/tag-list.js","webpack:///./src/components/post-list/post-list.js","webpack:///./src/templates/tag/tag.module.less"],"names":["module","exports","pageQuery","TagPage","data","tag","pageContext","tagName","Config","tags","name","Utils","capitalize","tagPagePath","pages","tagImage","allFile","edges","find","edge","node","childImageSharp","fluid","title","description","path","resolvePageUrl","keywords","className","style","heading","cover","posts","allMdx","TagList","filter","index","indexOf","sort","map","to","key","PostList","container","post","frontmatter","date","excerpt","alt","content"],"mappings":"iFACAA,EAAOC,QAAU,CAAC,KAAO,iC,wPC+DZC,EAAS,aA2CPC,UA9FC,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KACXC,EADmC,EAAlBC,YACCD,IAClBE,EAAUC,IAAOC,KAAKJ,GAAKK,MAAQC,IAAMC,WAAWP,GACpDQ,EAAcL,IAAOM,MAAMT,IAC3BU,EAAWX,EAAKY,QAAQC,MAAMC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,KAAKV,OAASL,KAAKe,KACtEC,gBAAgBC,MAEnB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,MAAOhB,EACPiB,YAAW,kBAAoBjB,EAC/BkB,KAAMd,IAAMe,eAAeb,EAAaR,GACxCsB,SAAU,CAACpB,KAEb,yBAAKqB,UAAWC,IAAMC,SACpB,6BACE,4BAAKvB,IAEP,yBAAKqB,UAAWC,IAAME,OACpB,kBAAC,IAAD,CAAKT,MAAOP,MAGhB,kBAAC,IAAD,CAAUiB,MAAO5B,EAAK6B,OAAOhB,W,qBCnCnCjB,EAAOC,QAAU,CAAC,UAAY,qCAAqC,KAAO,gCAAgC,MAAQ,iCAAiC,QAAU,qC,4LCyB9IiC,EAjBC,SAAC,GAAD,IAAGzB,EAAH,EAAGA,KAAH,OACd,yBAAKmB,UAAWC,IAAMpB,MACnBA,EACE0B,QAAO,SAAC9B,EAAK+B,GAAN,OAAgBA,IAAU3B,EAAK4B,QAAQhC,MAC9CiC,OACAC,KAAI,SAAAlC,GAAG,OACN,kBAAC,OAAD,CAAMmC,GAAI7B,IAAMe,eAAelB,IAAOM,MAAMT,IAAKA,GAAMoC,IAAKpC,GACzDG,IAAOC,KAAKJ,GAAKK,MAAQC,IAAMC,WAAWP,U,oLC2CtCqC,EAjDE,SAAC,GAAD,IAAGV,EAAH,EAAGA,MAAH,OACf,yBAAKJ,UAAWC,IAAMc,WACnBX,EAAMO,KAAI,SAACK,EAAMR,GAAW,IAAD,EAC0BQ,EAAKxB,KAAKyB,YAAtDtB,EADkB,EAClBA,MAAOuB,EADW,EACXA,KAAMrB,EADK,EACLA,KAAMhB,EADD,EACCA,KAAMsB,EADP,EACOA,MAAOgB,EADd,EACcA,QACxC,OACE,yBAAKN,IAAKlB,EAAOK,UAAWC,IAAMe,MAChC,yBAAKhB,UAAWC,IAAME,OACpB,kBAAC,OAAD,CAAMS,GAAI7B,IAAMe,eAAeD,IAC7B,kBAAC,IAAD,CACEH,MAAOS,EAAMV,gBAAgBC,MAC7BC,MAAOwB,EACPC,IAAKzB,MAIX,yBAAKK,UAAWC,IAAMoB,SACpB,kBAAC,OAAD,CAAMT,GAAI7B,IAAMe,eAAeD,IAC5BqB,EAAO,+BAAQA,GAAgB,KAChC,4BAAKvB,GACL,2BAAIwB,IAEN,kBAAC,IAAD,CAAStC,KAAMA,Y,qBC9B3BT,EAAOC,QAAU,CAAC,QAAU,6BAA6B,MAAQ","file":"component---src-templates-tag-tag-js-1cb60e0968c011f103d4.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tags\":\"tag-list-module--tags--3uJ7V\"};","/* Vendor imports */\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { graphql } from 'gatsby'\r\nimport Img from 'gatsby-image'\r\n/* App imports */\r\nimport Layout from '../../components/layout'\r\nimport SEO from '../../components/seo'\r\nimport PostList from '../../components/post-list'\r\nimport style from './tag.module.less'\r\nimport Config from '../../../config'\r\nimport Utils from '../../utils'\r\n\r\nconst TagPage = ({ data, pageContext }) => {\r\n  const tag = pageContext.tag\r\n  const tagName = Config.tags[tag].name || Utils.capitalize(tag)\r\n  const tagPagePath = Config.pages.tag\r\n  const tagImage = data.allFile.edges.find(edge => edge.node.name === tag).node\r\n    .childImageSharp.fluid\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO\r\n        title={tagName}\r\n        description={`All post about ${tagName}`}\r\n        path={Utils.resolvePageUrl(tagPagePath, tag)}\r\n        keywords={[tagName]}\r\n      />\r\n      <div className={style.heading}>\r\n        <div>\r\n          <h1>{tagName}</h1>\r\n        </div>\r\n        <div className={style.cover}>\r\n          <Img fluid={tagImage} />\r\n        </div>\r\n      </div>\r\n      <PostList posts={data.allMdx.edges} />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nTagPage.propTypes = {\r\n  data: PropTypes.shape({\r\n    allMdx: PropTypes.shape({\r\n      edges: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    }).isRequired,\r\n    allFile: PropTypes.shape({\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            name: PropTypes.string.isRequired,\r\n            childImageSharp: PropTypes.shape({\r\n              fluid: PropTypes.object.isRequired,\r\n            }).isRequired,\r\n          }).isRequired,\r\n        })\r\n      ).isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n  pageContext: PropTypes.shape({\r\n    tag: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n}\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String!) {\r\n    allMdx(\r\n      filter: {\r\n        frontmatter: { tags: { in: [$tag] } }\r\n        fileAbsolutePath: { regex: \"/index.mdx?$/\" }\r\n      }\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n    ) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            title\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n            path\r\n            tags\r\n            excerpt\r\n            cover {\r\n              childImageSharp {\r\n                fluid(maxWidth: 600) {\r\n                  ...GatsbyImageSharpFluid_tracedSVG\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    allFile(filter: { name: { eq: $tag }, dir: { regex: \"/tags$/\" } }) {\r\n      edges {\r\n        node {\r\n          name\r\n          childImageSharp {\r\n            fluid(maxHeight: 200) {\r\n              ...GatsbyImageSharpFluid_tracedSVG\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default TagPage\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"post-list-module--container--1ANXI\",\"post\":\"post-list-module--post--39h-F\",\"cover\":\"post-list-module--cover--2O8pN\",\"content\":\"post-list-module--content--llWjm\"};","/* Vendor imports */\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\n/* App imports */\r\nimport style from './tag-list.module.less'\r\nimport Config from '../../../config'\r\nimport Utils from '../../utils'\r\n\r\nconst TagList = ({ tags }) => (\r\n  <div className={style.tags}>\r\n    {tags\r\n      .filter((tag, index) => index === tags.indexOf(tag)) // Remove duplicate values\r\n      .sort()\r\n      .map(tag => (\r\n        <Link to={Utils.resolvePageUrl(Config.pages.tag, tag)} key={tag}>\r\n          {Config.tags[tag].name || Utils.capitalize(tag)}\r\n        </Link>\r\n      ))}\r\n  </div>\r\n)\r\n\r\nTagList.propTypes = {\r\n  tags: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n}\r\n\r\nexport default TagList\r\n","/* Vendor imports */\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\nimport Img from 'gatsby-image'\r\n/* App imports */\r\nimport style from './post-list.module.less'\r\nimport TagList from '../tag-list'\r\nimport Utils from '../../utils'\r\n\r\nconst PostList = ({ posts }) => (\r\n  <div className={style.container}>\r\n    {posts.map((post, index) => {\r\n      const { title, date, path, tags, cover, excerpt } = post.node.frontmatter\r\n      return (\r\n        <div key={title} className={style.post}>\r\n          <div className={style.cover}>\r\n            <Link to={Utils.resolvePageUrl(path)}>\r\n              <Img\r\n                fluid={cover.childImageSharp.fluid}\r\n                title={excerpt}\r\n                alt={title}\r\n              />\r\n            </Link>\r\n          </div>\r\n          <div className={style.content}>\r\n            <Link to={Utils.resolvePageUrl(path)}>\r\n              {date ? <label>{date}</label> : null}\r\n              <h2>{title}</h2>\r\n              <p>{excerpt}</p>\r\n            </Link>\r\n            <TagList tags={tags} />\r\n          </div>\r\n        </div>\r\n      )\r\n    })}\r\n  </div>\r\n)\r\n\r\nPostList.propTypes = {\r\n  posts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      node: PropTypes.shape({\r\n        frontmatter: PropTypes.shape({\r\n          title: PropTypes.string.isRequired,\r\n          date: PropTypes.string,\r\n          path: PropTypes.string.isRequired,\r\n          tags: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n          cover: PropTypes.shape({\r\n            childImageSharp: PropTypes.shape({\r\n              fluid: PropTypes.object.isRequired,\r\n            }).isRequired,\r\n          }).isRequired,\r\n        }),\r\n      }),\r\n    })\r\n  ),\r\n}\r\n\r\nexport default PostList\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"tag-module--heading--1Kl-x\",\"cover\":\"tag-module--cover--2AxsX\"};"],"sourceRoot":""}
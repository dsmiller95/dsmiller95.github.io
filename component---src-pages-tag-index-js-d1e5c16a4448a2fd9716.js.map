{"version":3,"sources":["webpack:///./src/pages/tag/index.js","webpack:///./src/pages/tag/tag.module.less"],"names":["query","Tag","data","rawTags","allMdx","edges","map","edge","node","frontmatter","tags","reduce","prev","curr","concat","filter","tag","index","indexOf","sort","tagPage","Config","pages","title","description","path","to","Utils","resolvePageUrl","className","style","card","key","cover","fluid","allFile","find","name","childImageSharp","content","capitalize","sTag","length","module","exports"],"mappings":"uTAqFaA,EAAK,aA0BHC,UAnGH,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACPC,EAAUD,EAAKE,OAAOC,MACzBC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,YAAYC,QAClCC,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAKE,OAAOD,MAChCH,EAAOP,EACVY,QAAO,SAACC,EAAKC,GAAN,OAAgBA,IAAUd,EAAQe,QAAQF,MACjDG,OACGC,EAAUC,IAAOC,MAAMN,IAE7B,OACE,kBAAC,IAAD,CAAQO,MAAM,QACZ,kBAAC,IAAD,CACEA,MAAM,OACNC,YAAY,+BACZC,KAAML,IAER,6BACGV,EAAKJ,KAAI,SAAAU,GAAG,OACX,kBAAC,OAAD,CACEU,GAAIC,IAAMC,eAAeR,EAASJ,GAClCa,UAAWC,IAAMC,KACjBC,IAAKhB,GAEL,yBAAKa,UAAWC,IAAMG,OACpB,kBAAC,IAAD,CACEC,MACEhC,EAAKiC,QAAQ9B,MAAM+B,MAAK,SAAA7B,GAAI,OAAIA,EAAKC,KAAK6B,OAASrB,KAAKR,KACrD8B,gBAAgBJ,SAIzB,yBAAKL,UAAWC,IAAMS,SACpB,4BAAKlB,IAAOX,KAAKM,GAAKqB,MAAQV,IAAMa,WAAWxB,IAC/C,2BAAIK,IAAOX,KAAKM,GAAKQ,aACrB,+BACErB,EAAQY,QAAO,SAAA0B,GAAI,OAAIA,IAASzB,KAAK0B,OADvC,mB,qBC7CdC,EAAOC,QAAU,CAAC,KAAO,0BAA0B,MAAQ,2BAA2B,QAAU","file":"component---src-pages-tag-index-js-d1e5c16a4448a2fd9716.js","sourcesContent":["/* Vendor imports */\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { graphql, Link } from 'gatsby'\r\nimport Image from 'gatsby-image'\r\n/* App imports */\r\nimport Layout from '../../components/layout'\r\nimport SEO from '../../components/seo'\r\nimport Config from '../../../config'\r\nimport Utils from '../../utils'\r\nimport style from './tag.module.less'\r\n\r\nconst Tag = ({ data }) => {\r\n  const rawTags = data.allMdx.edges\r\n    .map(edge => edge.node.frontmatter.tags)\r\n    .reduce((prev, curr) => prev.concat(curr))\r\n  const tags = rawTags\r\n    .filter((tag, index) => index === rawTags.indexOf(tag))\r\n    .sort() // Remove duplicates and sort values\r\n  const tagPage = Config.pages.tag\r\n\r\n  return (\r\n    <Layout title=\"Tags\">\r\n      <SEO\r\n        title=\"Tags\"\r\n        description=\"All present tags in the site\"\r\n        path={tagPage}\r\n      />\r\n      <div>\r\n        {tags.map(tag => (\r\n          <Link\r\n            to={Utils.resolvePageUrl(tagPage, tag)}\r\n            className={style.card}\r\n            key={tag}\r\n          >\r\n            <div className={style.cover}>\r\n              <Image\r\n                fluid={\r\n                  data.allFile.edges.find(edge => edge.node.name === tag).node\r\n                    .childImageSharp.fluid\r\n                }\r\n              />\r\n            </div>\r\n            <div className={style.content}>\r\n              <h2>{Config.tags[tag].name || Utils.capitalize(tag)}</h2>\r\n              <p>{Config.tags[tag].description}</p>\r\n              <label>{`${\r\n                rawTags.filter(sTag => sTag === tag).length\r\n              } Posts`}</label>\r\n            </div>\r\n          </Link>\r\n        ))}\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nTag.propTypes = {\r\n  data: PropTypes.shape({\r\n    allMdx: PropTypes.shape({\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            frontmatter: PropTypes.shape({\r\n              tags: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n            }).isRequired,\r\n          }).isRequired,\r\n        }).isRequired\r\n      ).isRequired,\r\n    }).isRequired,\r\n    allFile: PropTypes.shape({\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            name: PropTypes.string.isRequired,\r\n            childImageSharp: PropTypes.shape({\r\n              fluid: PropTypes.object.isRequired,\r\n            }).isRequired,\r\n          }).isRequired,\r\n        }).isRequired\r\n      ).isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n}\r\n\r\nexport const query = graphql`\r\n  {\r\n    allMdx(filter: { fileAbsolutePath: { regex: \"/index.mdx?$/\" } }) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            tags\r\n          }\r\n        }\r\n      }\r\n    }\r\n    allFile(filter: { relativeDirectory: { eq: \"tags\" } }) {\r\n      edges {\r\n        node {\r\n          name\r\n          childImageSharp {\r\n            fluid(maxWidth: 400) {\r\n              ...GatsbyImageSharpFluid_tracedSVG\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default Tag\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"tag-module--card--3mNtD\",\"cover\":\"tag-module--cover--1iekb\",\"content\":\"tag-module--content--2WX7i\"};"],"sourceRoot":""}
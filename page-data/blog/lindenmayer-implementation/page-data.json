{"componentChunkName":"component---src-templates-post-post-js","path":"/blog/lindenmayer-implementation","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Implementing Efficient Lindenmayer Systems in unity\",\n  \"tags\": [\"procGen\", \"graphics\"],\n  \"date\": \"2022-08-10T05:25:44.226Z\",\n  \"path\": \"blog/lindenmayer-implementation\",\n  \"cover\": \"./preview.png\",\n  \"excerpt\": \"Overview of an optimized l-system implementation allowing for rapid updates\",\n  \"author\": \"Dan Miller\",\n  \"projectImages\": [{\n    \"src\": \"./examples/lettered-menu.mp4\",\n    \"description\": \"Lettering generated by L-systems for the title screen\",\n    \"align\": \"center\"\n  }, {\n    \"src\": \"./examples/light-seeker.mp4\",\n    \"description\": \"Sunlight-seeking behavior enabled by high resolution sunlight simulation\",\n    \"align\": \"center\"\n  }, {\n    \"src\": \"./examples/tree-video.mp4\",\n    \"description\": \"A bush emitting pollen from its flowers. The L-system can integrate with DOTS to spawn ingame objects with high efficiency\",\n    \"align\": \"center\"\n  }]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar SlickCarousel = makeShortcode(\"SlickCarousel\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/dsmiller95/LindenmayerPlantSimulation/tree/master/Packages/com.dman.l-system\"\n  }), mdx(\"img\", _extends({\n    parentName: \"a\"\n  }, {\n    \"src\": \"https://badgen.net/badge/icon/github?icon=github&label\",\n    \"alt\": \"GitHub\"\n  })))), mdx(\"p\", null, \"In my work on Seeb Defender I needed to find a way to simulate the growth of plants, especially plants who's behavior can be reconfigured during runtime. After doing some research I reached for L-Systems, and what follows is an overview of how I started and then optimized my implementation.\"), mdx(\"h2\", null, \"Examples\"), mdx(\"p\", null, \"Some examples of what is possible with an optimized L-system, these are all recorded in real-time.\"), mdx(SlickCarousel, {\n    settings: {\n      infinite: true,\n      slidesToShow: 1,\n      slidesToScroll: 1,\n      speed: 500,\n      adaptiveHeight: true,\n      draggable: true\n    },\n    images: [{\n      src: fieldFlower,\n      alt: \"a fractal plant can grow large in only a handful of steps\"\n    }, {\n      src: treeVid,\n      alt: \"A bush grows more aggressively in areas facing the sun\"\n    }, {\n      src: lightSeeker,\n      alt: \"vines grow towards a moving light source\"\n    }, {\n      src: fractal,\n      alt: \"Unique coloration is possible by assigning color parameters from inside the L-system, interpreted by a pallet shader\"\n    }, {\n      src: menu,\n      alt: \"A few parameters injected into a specially designed L-system can control its overall shape, allowing for lettering\"\n    }],\n    mdxType: \"SlickCarousel\"\n  }), mdx(\"h2\", null, \"What is an L-system?\"), mdx(\"p\", null, \"An L-system is defined as a set of replacement rules which will replace specific characters in a string with their replacement string, producing a new combined output string.\"), mdx(\"p\", null, \"A basic example is a model of algal growth. In this example there are 2 symbols: A and B, representing a mature algae cell and an immature cell respectively. By configuring the rules of the l-system, we can simulate exponential growth:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-text\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"#axiom A // Seed the system with a single mature algae cell\\nA -> AB  // A mature cell is replaced with itself, and an immature cell\\nB -> A   // An immature cell matures\"))), mdx(\"p\", null, \"Over several steps, the string produced by this system grows nearly exponentially. The first 6 steps:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-text\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"A\\nAB\\nABA\\nABAAB\\nABAABABA\\nABAABABAABAAB\"))), mdx(\"p\", null, \"For more examples of L-systems, reference \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/L-system#Examples_of_L-systems\"\n  }), \"Wikipedia\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/dsmiller95/LindenmayerPlantSimulation/tree/master/Packages/com.dman.l-system#l-system-language\"\n  }), \"my l-system library documentation\"), \", or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://algorithmicbotany.org/papers/abop/abop.pdf\"\n  }), \"The algorithmic beauty of plants\"), \". \"), mdx(\"p\", null, \"This is an example of a basic L-system, but its grammar can be extended in several ways:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/L-system#Stochastic_grammars\"\n  }), \"Stochastic\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"stochastic rules are randomly picked, based on a certain probability factor\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/L-system#Parametric_grammars\"\n  }), \"Parametric\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"parametric l-systems attach numeric parameters to the symbols of its state\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"these parameters can be \\\"captured\\\" when replacing a symbol, and used to determine the parametric state of the next symbols\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/L-system#Context_sensitive_grammars\"\n  }), \"Context-sensitive\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"context sensitive rules inspect the symbols adjacent to the one being replaced\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"advanced usage will allow matching whole branching structures\")))), mdx(\"h1\", null, \"Implementation overview\"), mdx(\"p\", null, \"The full system is composed of three parts: the rule parsing system, the symbolic update engine, and the turtle rendering system. \"), mdx(\"p\", null, \"The rule parsing system translates all the replacement data into NativeArrays after parsing. Since it only runs once per l-system, optimization of this system has a lower priority and won't be discussed in depth here. Suffice to say the output is a set of native data structures accessible from Burst-compiled jobs. For more details on rule syntax, see \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/dsmiller95/LindenmayerPlantSimulation/tree/master/Packages/com.dman.l-system#l-system-language\"\n  }), \"the documentation\"), \".\"), mdx(\"p\", null, \"The symbolic update engine will generate next-states from input-states. A naive implementation of this engine iterates over every character in the input state, adding its replacement to the end of the output state string builder. Our implementation will take advantage of the fact that all of the replacements happen independently of each other, lending itself to parallelization.\"), mdx(\"p\", null, \"The turtle rendering system will actually render the l-system states. Its name comes from \\\"Turtle graphics\\\" in which a single \\\"turtle\\\" will walk through a space following a series of commands such as \", mdx(\"i\", null, \"move forward 1 unit\"), \", \", mdx(\"i\", null, \"turn right\"), \", or \", mdx(\"i\", null, \"decrease scale\"), \". In order to render branches, the symbols '\", \"[' and ']\", \"' are used to tell the turtle to push its current position and orientation onto a stack, or return to a previous state. By arranging movement commands interspersed with commands placing a mesh in 3D space, a turtle can trace out a whole plant from one string of characters.\"), mdx(\"h2\", null, \"Symbolic Update Engine\"), mdx(\"p\", null, \"Before digging in too deep, first lets describe what data we're dealing with here.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Input String\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a NativeArray\", \"<\", \"char>. this represents the previous state as a string of characters\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Output string\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"also a NativeArray\", \"<\", \"char>. this is generated from the input string as part of the update engine\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rule Data\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a set of native collections containing all of the replacement rules\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"every replacement rule has these properties:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a matching character, which this rule will replace\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a string of characters which will replace the matching character in the output string\")))))), mdx(\"p\", null, \"To optimize the update engine, we can follow two strategies. First, we will parallelize the process as much as possible. Second, we will adapt the process to run closer to the metal of the processer by converting all work into Unity's Burst-compiled Jobs. However, designing burstable jobs is not too complex for basic L-systems, the real complexity there is encountered when supporting contextual and parametric grammars. We won't discuss many details of Burst, instead focusing on what it takes to run in parallel Jobs.\"), mdx(\"p\", null, \"Parallelizing the basic L-System seems almost trivial. Every character in the input string can determine its own replacement independent of all the other characters' replacements. Even in all of the L-system variant extensions, replacing each character will only require inspecting adjacent characters in the \", mdx(\"i\", null, \"input\"), \" string.\"), mdx(\"p\", null, \"However, there is one complication we will run into. Some characters can be replaced with nothing, others can be replaced with more than one characters. Thus, we do not know how long the output string will be, and where each individual character's replacement will be copied into the output string. We can resolve this by seperating the process into three jobs, and returning once to the main thread to perform an allocation.\"), mdx(\"p\", null, \"In the first job, we match every character against all of the replacement rules and cache the ID of the matching rule, if any. Since we are storing an ID, we only need a NativeArray parallel to the input string to store this information. The process runs once per character in the input string, and the output space is well-defined, so this job can run as a IJobParallelFor!\"), mdx(\"p\", null, \"Second, we iterate over the matched IDs and add up the replacement rule's lengths, effectively determining how to pack all of the replacement data into the output NativeArray. This isn't parallelized, but it is a very quick iteration. Once we have packed the replacements into the output NativeArray, then back on the main thread we can allocate memory which will fit our replacements exactly. And we can run another parallel job to just copy the data over into the newly allocated output string.\"), mdx(\"p\", null, \"The whole process can be represented as psuedocode:\"), mdx(\"details\", null, mdx(\"summary\", null, \"Symbol Update Engine code\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"csharp\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"struct\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"JaggedIndexing\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\")), \" index\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\")), \" length\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"struct\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"Replacement\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"JaggedIndexing\"), \" replacementString\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\")), \" indexInOutput\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"static\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token return-type class-name\"\n  }), \"Replacement\"), \" ZERO \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=>\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"default\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token type-expression class-name\"\n  }), \"Replacement\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"class\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"SymbolicUpdateEngine\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), \"// persistently allocated\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"NativeHashMap\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"<\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"char\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" Replacement\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \">\")), \" ruleReplacements\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"NtiveArray\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"<\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"char\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \">\")), \" replacementCharacterData\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token return-type class-name\"\n  }), \"NativeArray\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"<\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"char\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \">\")), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"StepSystem\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"NativeArray\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"<\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"char\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \">\")), \" input\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"var\")), \" replacementMapping \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"new\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token constructor-invocation class-name\"\n  }), \"NativeArray\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"<\"), \"Replacement\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \">\")), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"input\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"Length\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"var\")), \" dep \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"new\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token constructor-invocation class-name\"\n  }), \"EvaluateReplacementsJob\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n      input \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" input\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \"\\n      ruleReplacements \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" ruleReplacements\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \"\\n      stringReplacements \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" replacementMapping\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"ScheduleParallel\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"input\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"Length\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\\n    dep \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"new\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token constructor-invocation class-name\"\n  }), \"CountReplacementsJob\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n      stringReplacements \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" replacementMapping\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"Schedule\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"dep\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n    dep\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"Complete\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"var\")), \" lastReplacement \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" replacementMapping\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"0\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"^\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"var\")), \" output \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"new\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token constructor-invocation class-name\"\n  }), \"NativeArray\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"<\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"char\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \">\")), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"lastReplacement\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"indexInOutput \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"+\"), \" lastReplacement\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"replacementString\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"length\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n    dep \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"new\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token constructor-invocation class-name\"\n  }), \"CopyReplacementJob\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n      stringReplacements \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" replacementMapping\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \"\\n      replacementCharacterData \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" replacementCharacterData\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \"\\n      output \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" output\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"Schedule\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"dep\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n    dep \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" replacementMapping\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"Dispose\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"dep\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n    dep\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"Complete\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"return\"), \" output\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"struct\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"EvaluateReplacementsJob\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token type-list\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"IJobParallelFor\")), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token attribute\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"ReadOnly\")), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"NativeArray\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"<\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"char\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \">\")), \" input\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token attribute\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"ReadOnly\")), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"NativeHashMap\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"<\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"char\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" Replacement\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \">\")), \" ruleReplacements\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"NativeArray\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"<\"), \"Replacement\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \">\")), \" stringReplacements\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"Execute\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\")), \" index\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"if\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"ruleReplacements\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"TryGetValue\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"input\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), \"index\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"out\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"var\")), \" replace\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n      stringReplacements\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), \"index\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" replace\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"else\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n      stringReplacements\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), \"index\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" Replacement\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"ZERO\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"struct\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"CountReplacementsJob\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token type-list\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"IJob\")), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"NativeArray\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"<\"), \"Replacement\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \">\")), \" stringReplacements\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"Execute\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"var\")), \" indexInReplacement \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"0\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"for\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\")), \" i \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"0\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \" i \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), \" stringReplacements\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"Length\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \" i\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"++\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n      stringReplacements\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), \"i\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"indexInOutput \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" indexInReplacement\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n      indexInReplacement \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"+=\"), \" stringReplacements\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), \"i\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"replacementString\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"length\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"struct\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"CopyReplacementJob\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token type-list\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"IJobParallelFor\")), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token attribute\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"ReadOnly\")), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"NativeArray\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"<\"), \"Replacement\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \">\")), \" stringReplacements\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token attribute\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"ReadOnly\")), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"NtiveArray\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"<\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"char\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \">\")), \" replacementCharacterData\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token attribute\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"NativeDisableParallelForRestriction\")), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), \"NativeArray\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"<\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"char\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \">\")), \" output\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"public\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"Execute\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\")), \" index\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"var\")), \" replacement \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" stringReplacements\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), \"index\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"for\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token class-name\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"int\")), \" i \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"0\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \" i \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"<\"), \" replacement\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"replacementString\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"length\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \" i\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"++\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"{\"), \"\\n      output\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), \"i \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"+\"), \" replacement\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"indexInOutput\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" replacementCharacterData\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), \"i \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"+\"), \" replacement\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"replacementString\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"index\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"}\"))))), mdx(\"p\", null, \"One of the drawbacks of this method is that it joins back to the main thread once to perform an allocation, as opposed to using something like a NativeList to dynamically allocate during the job. But as long as we're ok with the update spanning a couple of frames, this is a worthwhile tradeoff. We can kick the job off in early update, then complete it either next frame or in late update to perform the allocation.\"), mdx(\"h2\", null, \"Turtle Rendering System\"), mdx(\"p\", null, \"At a high level, the turtle system will be responsible for placing component Organs into a final resulting mesh. These following animations illustrate how the turtle walks along a path, leaving behind a trail. In our implementation, the trail will in fact be copies of 3D meshes.\"), mdx(SlickCarousel, {\n    settings: {\n      infinite: true,\n      slidesToShow: 1,\n      slidesToScroll: 1,\n      speed: 500,\n      draggable: true\n    },\n    images: [{\n      src: turtle,\n      alt: \"a turtle follows simple commands to trace out a trail\"\n    }, {\n      src: turtleStar,\n      alt: \"with clever instruction use, the turtle can trace more complex objects\"\n    }],\n    mdxType: \"SlickCarousel\"\n  }), mdx(\"p\", null, \"Its less clear how to parallelize the turtle system. Its nature is inherently single-threaded: the turtle \\\"walks\\\" along the input string, modifying its own state as it goes. This part of the system should be single-threaded. Our goal here is to offload as much work as possible into a more parallelizable form, so that the only work that occurs on the first job is that which cannot be done in parallel.\"), mdx(\"p\", null, \"The biggest piece of work we can offload is the building of the 3D mesh out of component organ instances. If we configure the first turtle job to output a list of positions of each mesh type to copy, we can employ the same technique used in the symbolic update engine to pack the vertexes into the output mesh! Once we know which meshes need to be copied into the output mesh and how to position them, we allocate all the mesh space and copy the component organ meshes into the output mesh in parallel.\"), mdx(\"h2\", null, \"Future improvements\"), mdx(\"p\", null, \"After converting most of the processing into parallelized jobs, most of the further optimizations from here out involve moving work into hardware which specializes in highly parallel jobs: the GPU! An obvious target for this would be the last step of the turtle job. Instead of uploading a whole mesh into the GPU, we could upload data about the component organs as a sort of point cloud. A particle shader in the GPU could do the same work that's being done on the CPU, turning those points into triangles to render.\"), mdx(\"p\", null, \"In theory parts of the Symbolic Update Engine could also be run on the GPU. All of the heavy lifting is done in parallel jobs, which could be translated into compute shaders, with the re-allocation happening between frames as it currently does. One of the main difficulties with this will be the complexity of the system, due to supporting context-sensitive and parametric grammars in the replacement rules.\"));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":5,"frontmatter":{"title":"Implementing Efficient Lindenmayer Systems in unity","date":"10 Aug 2022","tags":["procGen","graphics"],"path":"blog/lindenmayer-implementation","excerpt":"Overview of an optimized l-system implementation allowing for rapid updates","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='225'%20viewBox='0%200%20400%20225'%20preserveAspectRatio='none'%3e%3cpath%20d='M21%202l3%204%202%202-2%203c-3%204-2%208%202%205%202-2%202-1%203%209v9l-2-3-4-3c-1%200-1-1%201-3%203-4%204-7%201-7-1%200-6%204-6%206l-4%201h-4l1-2v-3c-1-1-5%201-7%204-1%202-1%202-2%201l-2-2v9l2%206c0%204%200%205-1%204-3%200-3%205%200%207v2l-2%205c0%203%200%203%202%202%203-1%203-1%203%204%201%204%201%204-2%204-3%201-3%202-3%204l1%203c2%200%202%201%201%203%200%204%201%204%205%200%203-3%204-4%205-2%202%202%207%203%208%202l-1-2c-2-3-2-3%202-3%202-1%204%200%205%201%203%202%208%203%208%201%200-1-4-6-6-6l1-3c3-3%204-7%202-7l-5%203c-2%203-5%204-7%205l-5%201c-2%200-2%200-3-13%200-1%201-2%208-3l8-1-1%204v3l3-1%204-4%201-2%202%202%205%203c3%200%203%201%201-4%200-2%201-2%208-2h8l1%207v6h-5l-10-2c-6-5-8-2-2%204l2%202-2%202-2%203-1%202c-1%203%203%202%207-1%204-5%2011-6%209-1-1%203-1%203%201%203l4-3%203-3%202%203%205%202c2%200%202%200%201-3-2-3%205-3%2010%201%205%203%206%206%201%203-3-2-3%201%201%204%202%203%203%206%201%205l-3%203c-2%204-1%204%202%203%205-3%204%200-1%205-6%205-11%206-10%201v-3l-3%201-4%204c-1%201-1%201-4-1-4-3-7-3-5%201%202%203-6%204-9%201l-3-2-2-1c-3-1-1%204%202%206l3%202-3%203-2%205c0%202%200%202%203%201l3-4c1-2%204-3%2010-3h4v7l1%207-16%202c-2%200-2%200-1-3%202-4%201-4-4%200l-4%203-4-2c-4-2-5-2-3%201%201%202-1%203-11%203l-5%201-1-6c-1-7-1-7%205-8%204-1%205-1%207%201s7%203%207%201l-3-4c-4-2-4-2-2-4%202-3%204-8%202-8l-5%204c-5%205-10%206-9%201%200-3%200-3-2-2l-4%204-2%202-3-2c-4-3-5-3-5%204v5h3c4-1%204-1%204%205%201%205%200%206-4%203-2-1-1%202%202%205%203%204%203%204%202%206-3%204-4%207-2%207l3-1c1-1%202%200%202%203%201%205%201%205-5%206-5%200-5%200-5%203s0%203%204%203l4-1-1%204c0%203%200%203%202%202l4-4c2-2%202-2%203-1l8%204-1-3-1-2h9l7%203%202%201-3%201c-4-1-4%200%200%204l3%203-2%202-2%205c0%202%200%202%203%201%202-1%202-1%202%203l3%2024-21%202v-13l4-1c5-1%206%200%209%202%206%204%209%201%203-3l-3-3%202-3c3-4%203-7%200-6l-5%204c-2%202-3%203-5%203-3%200-4%200-3-3%200-3%200-3-2-2l-4%203c-1%203-2%203-4%201-4-3-7-4-7-2l2%204c0%201-7%202-9%200-1-1-1%200-1%206s1%207%203%202l7-1%206-1v3l1%205c0%202%200%202-3%201-4%200-4%201%200%205l3%203-2%203-2%204c0%202%202%203%204%201%201-2%202%201%202%206%200%203%200%203-6%203-4%201-6%201-7-1l-4-2c-3-1-2%204%201%206%204%203%2044%203%2040%200l-2-2%202-3c5-6%202-8-3-3-3%203-4%204-9%204h-5l-1-6-1-7%209-2%208-1-1%204v3l3-1%203-4c1-2%203-3%203-1l8%204-1-3c-2-3-2-3%208-4%209%200%208-1%209%208%201%205%201%205-2%205-6%202-9%201-11%200l-4-3c-4%200-3%203%201%206%203%202%203%202%201%204-3%203-2%204%201%204l4-2c0-2%201-2%204-2s4%200%203%202c-1%203%205%203%206%200s3-4%203-2l8%204-1-3c-1-3-1-3%203-3%203-1%204%200%206%202%206%205%209%202%204-3-4-4-4-4-2-6l2-4c1-3-2-3-5%201-3%203-4%204-9%204l-5%201v-4c-1-6-1-6%202-5%203%200%203%200%202-2l-4-5c-2-1-2-1%200-3l2-5c1-2%201-2-2-2-3%201-3%201-3-3-1-5-2-5%205-6%205%200%206%200%208%202l5%202c2%200%202%200%201-2l-2-3-2-2c-2-1-2-1%200-3l2-5c1-3-2-3-5%201l-7%204c-3%201-3%201-2-2%200-4-2-4-6%200-2%202-3%203-4%202l-4-3c-3-1-4%200-2%203%201%203-6%204-9%201l-5-3c-3%200-3-1-3-4v-3l20-2c25-3%2024-3%2023%201-1%203-1%203%201%202s5-3%204-4c-1-2%202-2%204%200%205%204%209%204%205%200-1-2-1-2%201-2l43-5%201%2012v11l-3-3-4-3%203-3c2-3%203-7%201-7l-5%204c-4%204-10%205-9%200v-3l-3%201-4%204c-1%201-1%201-3-1-3-2-7-4-7-2%202%205%202%205-2%205-3%200-4%200-6-2-3-2-6-3-6-1l3%204%203%203-2%202c-3%203-4%207-2%207l4-3c5-5%2015-6%2015-2l1%205c0%203%200%203-3%202-4%200-4%201%200%205%203%203%203%203%202%204-2%201-4%208-3%208l2-1c3-1%203-1%203%203v5c-1%201-11%202-12%201l-8-4c-1%200%203%206%205%207s2%201%200%203c-5%206-3%2010%203%205%202-3%204-4%206-5%204%200%204%200%203%203%200%204%201%204%205%200l3-3%203%202c4%203%206%203%206%200-2-3-1-4%202-4s5%200%207%202%206%203%206%201l-3-4-4-3%203-3c4-6%202-8-3-3-3%203-5%204-9%205h-6v-5c-2-10-2-9%2011-10l5-1-1%203c-1%204%201%204%205%200%203-3%203-3%204-2%201%202%207%205%208%204l-1-3c-2-3-2-3%208-3l8-1v5c1%209%202%209-5%209-5%201-6%200-8-2-6-4-8-1-3%204l3%202-3%203c-2%202-3%206-1%206l4-3%207-4h4l-1%203c-1%204%201%204%205%200l3-3%202%203%205%202c2%200%202%200%201-2-2-3-2-3%200-3%204-2%204-1%204%207v8h6v-6c0-5%200-6%202-6l2%201v2c0%202%203%201%206-2%204-4%2010-4%209%201%200%203%203%203%206%200l2-3%203%203c4%204%207%204%205%200-2-3%206-3%209%200l5%204c2%200%202%200%202-2l-4-5-2-2%203-3c4-4%204-6%200-5l-4%203c-1%202-3%202-7%202h-6v-15h5c9%200%2012%201%2011%204%200%203%202%203%206%200l2-3%203%203c3%203%207%204%206%202-2-6-3-5%202-5l9%201h5v13h-6c-5%200-6%200-9-2-3-4-6-4-5-1l3%204%202%202-2%202c-3%202-4%207-2%207l4-3c5-4%2011-4%2010%200v3l5-3%203-2%202%202c4%204%207%204%206%201s-1-3%203-3l6%202%204%203c3%201%203-2-1-5l-2-3%202-3c4-4%204-6%200-5l-4%203c-1%202-3%202-7%202h-6v-10l3%201c4%200%203-2-1-6l-2-3%202-2c4-3%204-6%201-6-3%201-3%201-3-3v-5h6c5%200%207%200%208%202s6%205%207%204c0-1-3-7-5-8v-2c2-1%205-7%205-8-1%200-8%203-8%205l-5%201c-4%200-4%200-3-3v-3l-5%203c-3%202-3%202-4%201l-4-4-3-1v3c1%203%200%203-3%203l-7-3-4-3c-2%200-1%204%202%206l2%203-2%202c-4%203-4%207-1%206l4-3c2-2%203-2%208-2h6v15h-6l-11-1h-4v-16l1-16h44l-1%203c-2%204%200%204%204%200l3-3%203%202c3%203%206%204%206%202l-2-2-1-2%2045-2%201%2012c0%208%200%2010-1%208l-2-2-2-1c-2-2-2-2%200-5%203-2%204-6%202-6-1%200-5%202-7%205l-5%202c-3%200-3%200-2-3%201-4-1-4-5%200-3%203-3%203-4%202-1-2-7-5-8-4l1%203c2%203-5%204-9%200-6-4-8-1-3%204l3%203-3%201c-2%202-3%207-1%207l4-3c3-3%204-3%209-4h6v6c0%204%200%205-1%204l-3-1c-2%200-1%203%202%206%203%202%203%203%201%204-3%201-4%207-2%207l3-1c1-1%201%200%201%204v5h-6l-7-1-4-3c-4-1-4%201%200%205l3%203-3%202c-2%203-3%207-1%207l5-3c2-3%204-4%206-4%204%200%204%200%203%203-1%204%202%204%205%200%203-3%203-3%205-1%201%202%207%205%207%203l-1-3c-2-3%206-3%209%201%203%203%207%203%206%200l-3-4-2-2%203-4%202-4c0-2-4-1-6%202-3%203-3%203-8%203-7%200-7%200-7-8v-6h17v5l4-3%204-3%202%203c3%203%207%203%205-1-1-2%200-2%206-3%2011%200%2011%200%2011%207v7h-6l-7-1-4-3c-4-1-4%202%200%205l3%203-3%202c-3%203-3%207%200%206l4-3c2-2%203-3%206-3%204%200%204%200%203%203l-1%203c1%201%206-2%207-4l1-2%203%202%202%202v-5l-1-5v-10c1%200%202-3%202-8%200-8%200-8-2-7-2%200-2%200-2-4s0-5%202-5l1-6c0-7%200-7-4-3-3%202-3%202-5%201l-4-3c-2-1-2-1-2%202%201%203%201%203-2%203l-8-2-4-3c-2%200-1%204%202%206l3%203-3%202c-2%202-3%206%200%206%201%200%205-3%205-5l7-1h6v14h-4l-10%201h-7v-6l-1-14v-8h3c3%201%203%200-1-4l-3-4%203-2c3-3%203-6%200-6h-3l2-1%204-3c4-4%2012-5%2010-1-2%205%201%206%205%201l2-2%203%202c3%203%206%204%206%201l-1-2v-1l1-3c0-3%200-3-2-3-3%200-3%200-3-5s0-5%203-4c3%200%203-3-1-6l-2-2%202-2c2-2%202-2%203-1s1%201%201-2-1-4-4-3c-2%201-2%201-2-4s0-5%202-5c3%200%203%200%203-6%200-7-2-7-7-3-2%202-2%202-3%200l-3-1-1-1c-2-2-3-1-2%202%200%202%200%202-4%202l-5-2-5-2c-2-1-2-1-1%202l3%204c2%201%202%201%200%204l-3%204c-1%203%202%203%206-1%202-3%203-3%208-3h6v15h-9c-7%200-9-1-9-2l2-2c1-3-3-2-6%201l-3%201-8-4v3l1%202h-17v-7l1-6%205-1c4%200%206%200%208%202%206%206%209%203%203-2l-2-3%202-3c3-3%204-6%202-6l-7%205-4%201c-4%200-4%200-3-2%200-4-3-4-6%200l-2%202-3-2-2-1-1-1c-2-2-3-1-2%202%200%202%200%202-4%202s-6-2-12-8l-3-4%202-3c4-4%205-7%201-5-3%202-3-5%201-9%203-2%2013-3%2010-1v5l5-2%202-3%204%203c4%204%207%204%204-1-2-4%206-3%2010%201%202%203%206%204%206%202l-5-6%202-4c5-5%202-8-3-3-3%202-4%202-10%202h-4V38h4c9%200%2014%201%2013%203-2%205%200%205%205%202l3-3%202%202c3%204%206%204%206%202l-1-3c-1-1%201-1%208-1h9v14h-6c-5%200-6-1-9-3l-4-3c-2%200-1%204%201%206l3%203-2%202-3%204c-1%203%202%203%205-1%203-2%204-3%208-2l2%201-1%203c0%202%205%201%207-2%201-2%202-2%204%201%204%204%206%204%206%201-1-3-1-3%202-3s4-2%204-7c0-2%200-2-1-1%200%202-1%202-5%202h-5v-6c0-5%200-5%202-4%205%203%205-1%200-6-1-1-2-2-1-3l5-6-3-1c-2%201-2%201-2-4v-5h5c4%200%204%200%204-3s0-3-3-3-3%200-2-2c1-4-3-4-6%200-2%202-2%202-3%201-1-2-7-5-8-5l1%203c1%203%201%203-3%203l-6-2-4-3-2-2c0-2%200-2%203-1%203%202%204%201%201-3l-1-3h-63v72h-21a1990%201990%200%2000-78-3c2-4%201-4-4-1l-4%203-4-3-4-2%202%204-5%201a1454%201454%200%2000-88%205h-7v-4l1-4%204-3c4-4%2010-4%209%200%200%204%201%204%205%200l3-3%203%203c3%203%206%203%206%200-1-3-1-3%203-3l4%201%207%204c2%200%201-3-2-6l-3-3%203-2c2-3%204-7%202-7s-6%203-7%205l-7%202h-6V41h17l-1%203c-1%204%201%204%205%200l3-2%203%202c4%203%207%203%205-1-1-2%200-2%207-3h8l1%207%201%206h-3c-6%202-9%201-11-1-3-4-7-4-6-1l3%204%202%202-3%203c-3%204-3%207%200%206%202%200%206-4%206-5l4-1c4%200%204%200%203%203%200%203%200%203%202%203l5-4%202-2%202%203c3%202%208%203%207%201l-2-3c-1-3%206-2%209%201%203%202%207%203%207%200l-3-4c-3-2-3-3-1-4l3-4c1-4-2-4-6%200-2%203-3%203-8%203h-6v-4c0-5%200-5%203-4%204%200%203-3-1-6l-3-3%203-2c4-4%203-8-1-6-2%201-2%201-2-3v-5h5c5-1%206-1%208%201%206%206%2010%203%204-2l-2-3%202-2%202-5c1-3-3-3-6%201s-11%205-9%201c3-5-1-5-6%200l-2%202-3-3c-3-3-6-3-5%201%200%203%200%203-3%203l-6-2c-3-4-7-4-6-1l3%204%202%202-3%203-2%205c0%202%204%201%206-2%203-3%203-3%209-3l6%201v13h-4l-11%201c-7%200-7%201-8-16V7l3%201c4%200%203-2%200-6A460%20460%200%200033%202c-1-2-12-3-12%200m224%200c-1%201-1%201%202%201%202-1%203-1%203%201l-2%201-5%203-6%202c-4-1-5-1-3-4%201-3-2-3-5%200-3%202-3%202-6%200l-3-2-1-1-1%203c1%202%201%202-3%201-3%200-6-2-8-3l-4-3v2c0%202%201%204%203%205%202%203%203%204%201%204s-5%204-5%206%204%200%207-2c1-2%203-2%208-2l5%201v5c0%205-1%207-3%205l-2-2c-2%200%200%204%202%207%203%202%202%203%200%205l-3%203c-1%202-1%202%202%202%203-1%203-1%202%205v3h-6c-4-1-7-1-9-3l-4-3c-2%200%201%206%203%207%203%202%202%203-1%204-3%202-5%206-2%206l4-2c2-2%204-3%207-3%204%200%204%200%202%205-1%202%203%201%206-2l3-2%203%203c4%204%205%204%205%200-1-3-1-3%203-2%203%200%205%201%207%203%205%205%207%203%202-3l-2-3%202-2%203-4c1-3-2-3-6%200-4%204-15%203-14%200l1-7v-5h8c8%200%2010%201%209%203-3%204%201%205%205%200l2-2%203%203%204%203c2%200%203-2%201-2l-1-2h17v13h-6c-4-1-7-1-10-3-5-4-5-2-1%203l3%204-2%201c-3%201-5%204-5%205%200%202%203%201%206-1%204-4%2012-4%2010-1-2%204%201%205%206%201%202-2%202-2%205%201%204%204%205%204%205%200-1-3-1-3%203-2l6%203c4%204%206%204%205%200l-3-4c-2-2-2-2%201-4%204-3%205-6%201-6l-5%203c-1%202-3%202-7%201-6%200-6%200-6-3%200-5%201-7%204-6l2%201-3-6-2-3%203-3c4-4%204-6%201-5s-3%201-3-4v-5h5c5%200%206%200%209%203s6%204%206%202l-5-6c-1-1%200-2%202-4%205-5%203-8-3-3l-6%202c-4%200-4%200-3-3%200-3-2-3-6%200-2%202-2%202-6%200-5-4-5-4-4%200%201%202%201%202-3%202-5%200-13-5-13-9%200-2%200-2-5-2-4%200-6%200-6%202m66%207c0%208%200%208%202%207l3-2-1-3c-2-1-3-3-3-5s0-2%206%202l5%203h4l-1-3V5l3%201%204%204c1%201%201%201%204-1l4-2c2%200%203%203%201%204s-1%202%203%202l5-1%204-3c4-1%204-2%204-5V1h-47v8M107%204C87%205%2087%205%2087%208c0%201%201%202%203%202l5%203%205%202c3%200%204%200%203-2%200-4%202-4%206-1l3%203%202-2c4-4%206-5%206-1-1%203%200%203%203%203l5-2c1-2%203-3%205-3%202-1%202-2%202-4-1-3-2-3-28-2M57%208l-24%202%204%2032h10c11%200%2011%200%2010-8v-7h-6l-8%204c-3%204-6%205-6%202l2-5c2-2%202-3%201-4l-5-6c0-2%203-1%207%202%204%202%2012%202%209%200-4-4%201-5%205-2%203%202%203%202%204%201%201-2%206-5%207-4v3l-1%202c0%202%207-1%2010-3l4-4%201-4V5L57%208m199%200l-1%2013v10h10l11%201v-8l1-7h-6c-5%200-6%200-8%202l-5%204c-2%200-2%200-1-2%200-3%203-6%204-5%202%201%201-2-1-4l-3-4c-1-2-1-2-1%200m-28%2014v6l11%201h10v-3c0-3%200-4-2-4l-4-3c-2-2-4-3-8-3l-6-1-1%207m89-4l-4%203c-2%200-2%201-2%2012v13l3%202c3%203%205%203%209%203h6v-5c0-5%200-5-2-4-5%202-5%200%200-5%202-2%202-3%201-4-2-1-4-7-3-7l2%201c3%201%203%201%203-2%202-7%201-8-2-8l-6-1c-2%200-3%200-5%202m20%207l-1%207h11l10%201v-4c0-3%200-4-2-4l-4-3c-2-2-3-3-8-3l-6-1v7m32-2l-5%203-1%204v4h21V20h-6c-5%200-6%200-9%203m-266-1c-4%200-6%201-9%203l-4%203v18c0%203%201%205%202%205l4%203c3%202%205%202%2011%201%203%200%203-1%203-3%200-4-1-6-3-5-4%202-4-2-1-6l3-2-3-2c-4-5-4-8%201-6%202%201%202%201%202-4%200-6%200-6-6-5m12%202l1%206v5h20v-4c0-3%200-4-3-4l-5-3c-2-3-13-3-13%200m-50%203c-2%200-2%201-1%206%200%203%201%203%203%202%203%200%203%203%200%206l-2%203%202%202%203%204c1%202%201%202-2%202l-3-1v10h5l10-4c4-3%204-4%204-8l-1-12c0-6%200-6-3-7l-4-3H65m-54%205c-3%200-3%200-2%204%201%2010%200%209%207%209%2014-2%2014-2%2014-6s0-4-3-4l-5-2c-3-2-5-2-11-1m163%2046a4795%204795%200%2001-82%204l2%2022%202%2021%204%201%204%203%207%201h6v-4c0-4%200-5-2-4-4%200-4-2%200-6%202-3%202-3%201-4-2%200-6-6-5-7l3%201%203%201V97l-6-1c-5%200-6%200-7%202l-8%205c-1-1%202-7%204-8v-2c-2-1-5-7-5-8l7%204c3%202%2010%202%209-1-2-4%200-4%205-1l3%203%202-2c4-4%206-5%206-1-1%203-1%203%203%203l6-3c5-5%208-3%204%203l-3%202%203%204%203%204c0%202-4%201-6-1-3-3-4-3-9-3h-5v14h4l8-1c5%200%205%200%204-3v-2l7%204%204-2c4-4%206-4%205%200l-1%203%2017-2V93h-6c-5%201-6%202-9%204l-4%203c-2%200-1-5%201-7l3-2-3-3c-4-3-4-6-1-5l4%202c4%204%2010%203%209-1-1-3%201-3%205%200s4%203%205%201%206-4%207-4l-1%203c-1%203-1%203%203%203%203%200%204-1%205-2l3-3%203-3c0-2-7-2-21-1m27%2045a445%20445%200%20001%2051l-1%2012c0%2012%200%2012%202%2012h2l2%202%204%203%208%203c6%200%207%200%207-7%200-3%200-3-3-2s-3%201-3-1l3-4%203-3-3-2c-3-4-3-7%201-6%202%201%202%201%202-4v-5h-6c-5%200-6%200-8%202l-4%203c-3%201-3-3%201-6l2-2-2-3c-3-3-4-6-2-6l6%205%205%201c4%200%204%200%203-3v-3l3%201%204%204c1%201%201%201%203-1%204-3%208-4%207-1l-2%203%203%201c5%200%2010-5%2010-8l3-5%202-2-2-3c-3-3-4-7-2-5%204%202%204%201%204-14v-14h-21v15h5c5%200%206%200%209-3%205-6%208-3%204%203l-3%203%203%202c2%203%203%206%200%206l-4-3c-2-2-4-2-6-2h-4l1%202v3l-7-4c-1-2-2-1-4%201l-4%203c-2%200-2%200-1-3%201-4-5-4-10%200l-4%203c-2%200-1-5%202-7l2-2-3-2-2-5c0-2%200-2%203%200%202%200%203%202%204%203l7%201h6v-5c0-4%200-4-3-3-4%200-4-2%200-6l3-3-3-2-3-4v-3l3%201%203%202V96h-6c-5%200-6%200-8%202l-5%203c-3%201-3-1%201-5l2-4c-2-1-5-5-5-7%200-1%204%200%206%203l6%202c4%200%204%200%203-3%200-3%200-3%202-2l5%203c2%202%202%202%204%200%203-3%206-4%206-2l-1%203c-2%201-1%202%203%202l7-3c3-3%206-4%206-2%200%201-3%206-5%206-1%201-1%201%201%203%202%201%204%205%204%206%200%202-4%201-6-1-2-3-3-3-8-3h-6v13h17l-1-2c-1-4%202-4%205-1l3%203%202-3c4-3%207-3%206%201l-1%203h18V97h-6c-6%200-7%200-9%202-2%203-6%204-6%203l4-7c1-1%201-2-1-4-3-3-4-6-2-6l6%204c1%201%202%202%205%202%204%200%204%200%203-3%200-4%202-3%206%200l2%203%203-3c4-4%207-3%205%201-1%202-1%202%203%202%206%200%2010-4%209-9v-4h-35l-52-1h-16v46m110-29a2045%202045%200%20014%2043l2-4%203-1-3-3c-4-3-4-6-1-5l5%202c1%201%203%202%207%202h6v-5c0-4%200-5-1-4l-3%201c-2%200-1-4%201-6l3-2-2-3c-3-3-4-6-2-6l1%201%202%201%201-5v-6h-6c-5%200-6%200-8%203-3%203-7%204-6%201l3-4c2-3%202-3%201-4l-4-4-3-4v12m-134%203l1%205h3c2-1%202-1%202%201l-1%202-2%203-2%202%203%203c4%204%204%205%200%205-3-1-3-1-3%201l1%205v3h6c8%200%2010-2%2010-17V99l-3-3c-3-3-5-3-10-3h-5v4m111%205c0%205%200%205%203%204%203%200%203%202-1%206l-2%202%202%203c4%205%204%207-1%205-2-1-2-1-2%204v5h6c5%200%206%200%209-2l3-3c1%200%202-3%201-11v-11l-4-4c-3-3-4-3-9-3h-5v5m-220%202l2%209%202-1c2-1%202-1%202%202l-3%205c-2%201-2%202%201%204%205%204%205%205%201%205-3-1-3-1-3%202l1%205c0%203%2010%203%2013%200l4-4c3-1%203-2%203-4l-2-8c0-10-1-12-3-12l-4-2c-3-2-12-3-14-1m87%2011c-4%200-4%200-4%203l2%206c3%200%204%200%206%202s3%202%208%202c7-1%206-1%205-8v-6h-6l-11%201m185%206v7h7l6-1%207-4c1%200%200%204-3%206-2%203-2%203-1%204%202%200%205%205%205%206%200%202-3%201-6-2l-7-2c-3%200-3%200-2%202%200%203%200%203-2%203l-5-4-2-2-1%202c-3%205-8%205-6%201%202-5-6-4-10%200l-4%203c-2%200-2%201-2%205v4h9l24-2h15v-33h-22v7m28-3c0%203%200%204%202%205l4%203c2%202%203%202%209%202h6v-6c0-7%200-7-3-7l-10-1h-8v4m-239-2c-7%200-7%200-5%2010v5l6-1%207-2c1-2%205-4%206-4%202%200%201%203-2%206l-2%203%202%202c2%201%204%205%204%207%200%201-5-1-7-4-3-2-11-3-10-1%202%205%202%205%200%205l-5-4-2-2-3%203c-3%204-6%204-5%200%201-3%201-3-3-3-3%200-4%201-6%203l-4%203c-1%200-2%207%200%2010%200%201%2025-1%2043-4h4v-11l-2-17v-5h-5l-11%201m131%203c0%204%201%206%204%207l4%203c1%202%202%202%207%202h6v-14h-10c-10%200-11%200-11%202m-200%206l-9%201h-8v3c0%204%201%206%204%206l4%202c2%201%204%202%208%201h6l-1-6c0-8-1-9-4-7m-37%203c-8%202-8%201-7%2011l1%205%205-1c5%200%206-1%209-4%203-4%206-4%205-1l-2%205c-3%202-2%203%200%204%201%200%203%201%203%203%202%203%202%202%201-12l-1-11h-4l-10%201m151%208l-4%203c-2%201-2%201-1-2s1-3-3-3c-3%200-4%201-5%203l-5%204c-3%201-3%201-1%201%204-1%204%202%201%205-2%203-2%203-1%205l2%201%202%203c1%202%201%202-2%202l-3-1v5l2%2015v9l8-1c13-1%2014-1%2014-3l-1-7v-5h-6c-5%201-6%201-9%204l-4%203c-2%200-1-5%201-7l3-2-3-2c-3-2-5-6-3-6l5%202c5%203%2012%203%2010%200l-1-3c1-1%208%203%208%204l4-2c4-4%205-4%205%200-1%203-1%203%202%202l5-1%201-13c0-14-1-16-7-16-4%200-4%200-3%203%202%203-3%203-6%200l-2-3-3%203m94%203l-4%203c-2%201-3%202-3%204v2h17l23%201h7v-3c0-2%200-3-2-3l-4-3c-2-2-4-3-7-3s-3%200-2%203c0%203%200%203-2%203l-5-4c-1-1-2-2-3-1l-6%205v-5c1-1%200-1-3-1-4%200-5%200-6%202m-189%204c-3%200-4%201-2%203l1%201c0%202-4%201-6-1l-3-2-3%203c-4%204-5%204-5%200%201-3%201-3-3-3l-6%204-5%204-1%203%201%203%2043-5c3%200%203%200%203-3%200-2%200-3-2-3l-5-2-3-3-4%201m107%2027c-3%200-3%201-3%203%200%205%201%207%203%206%204-2%204%202%200%206l-2%202%203%203c4%204%204%205%200%205l-3-1%201%205c0%206%200%205%205%205l5-1v-34h-3l-6%201m160%202h-4v7l1%207%2011-1h10v-3c0-4-1-6-3-6l-5-2-4-3-6%201m-113%201v12l10%202h10v-4c0-4%200-5-2-5l-4-3c-3-2-13-4-14-2m-99%201h-6v3l1%207v4h4l10-2h7v-4c0-3-1-4-3-4l-5-2c-2-2-3-2-8-2m-71%207l-5%201-2%203-3%203c-3%201-3%202-3%205v4l6-1c13-1%2016-2%2015-3a6879%206879%200%2001-2-13l-6%201'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.7730496453900708,"src":"/static/e6352b3ed61f00012258d728c4be5a52/31987/preview.png","srcSet":"/static/e6352b3ed61f00012258d728c4be5a52/e1953/preview.png 250w,\n/static/e6352b3ed61f00012258d728c4be5a52/46604/preview.png 500w,\n/static/e6352b3ed61f00012258d728c4be5a52/31987/preview.png 1000w,\n/static/e6352b3ed61f00012258d728c4be5a52/0dadc/preview.png 1500w,\n/static/e6352b3ed61f00012258d728c4be5a52/76f6f/preview.png 1921w","sizes":"(max-width: 1000px) 100vw, 1000px"}}}}},"allMdx":{"edges":[{"node":{"frontmatter":{"path":"blog/javascript-multi-threading","title":"Emulating multi-threading in javascript using generators","tags":["typescript","rxjs","javascript"],"excerpt":"Learn a handy hack to run expensive code on the UI thread.","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='220'%20viewBox='0%200%20400%20220'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20110v110h39a741%20741%200%200028-1c-13-1-12-2%201-2%208-1%2010%200%2010%201%200%202%202%201%202-1h6c7-1%2011-1%2012%201%200%202%202%201%202%200l2-2h6c1-1%201-1%201%201l-1%202h-2c-1%201%200%201%202%201l4-1v-3c1-1%201-1%201%201v3h288V0h-9l-8%201%201%201c5-1%205%200%203%202l-3%202h-2v2c-2%200-3-3-3-5l1-3h-51a433%20433%200%2000-64%204c-6%202-8%202-8%201%200-2%201-2%203-2l1-1c1-1%201-1%201%201h3l1-1c0-2-9-3-12-1l-5%201-3%202-3%201-6%202-10%202c-5%202-5%202-5%200s1-2%202-2h6l6-3%206-2c1-2%201-2-3-2l-5%201-3%201-2%201-2%201h-4c-1%202-8%203-11%203l-2%202c-2%202-3%201-2-1s14-6%2017-6l2-1-16-1c-15%200-17%200-18%202h-1c0-2-1-2-13-2l-13%201h-2v2l-1%202c-1%202-1%202%201%202h3c3%203%201%205-4%207-4%201-5%200-5-3V4l1-2a607%20607%200%2000-90-1L58%206c-1-1%203-4%205-4l3-1c3-2-15-1-20%202-4%202-9%202-9%201l8-3c2%200%202-1%200-1l-8%202-8%202%201-1c6-2%204-3-8-3L8%201H6L3%200H0v110m0%201v110l1-109a2269%202269%200%2001-1-1M248%207h-4l-3%201c0%202-4%203-8%203l-1%202-3%201c-7%200-10%200-10%202s0%202-3%201h-3l-1%201h-2c-1%202%200%203%203%202l4-1a396%20396%200%200031-12m27%2025l-3%201-8%203h-1c0-2%200-2-1-1l-3%201-3%201-2%201-3%201h-3c-1%200-7%202-9%204h-6c-2%200-4%202-3%203s6%200%205-1h6l3-1%2032-10v-2h-1M160%2043v4l-1%207c0%206%200%206%202%205l1-2%203-4c4-4%204-9%201-8h-2l2-1v-1h-6m2%2027l-4%201v10l1%2010%206-1c5-2%205-2%202-2h-3l3-1c2%200%204-2%201-2v-5c-1-1-1-2%201-2v-2c-2-1-2-2-1-4%201-3%200-4-6-2m105%2011h-4l-1%201-3%201h-3l-2%201h-2l-5%201-8%203h-8l-1%201c0%202%201%202%205%202l6-1%2020-4%202-2h1l7-1c2-1-2-3-4-2m57%2040l-10%201c-5%200-6%200-6%202l-1%201-1-1h-1l-1-1h-1l-2%201-2%201c0%202%206%202%2015%200l8-1h6l4-1%202-2c0-2%200-2-1%200h-1l-2-1h-3l-3%201m-87%2049h-4l-3%201-1%202-1-1h-14c-1%201-2%202-3%201l-5-1c-4%200-4%200-4%202s1%202%202%202l6-1c12%200%2021-1%2021-2h1l4%201c2%200%203-1%203-3s0-2-2-1'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.829268292682927,"src":"/static/b260f65fb76abb2f2a3a27d8d16ac9bf/2a4de/preview.png","srcSet":"/static/b260f65fb76abb2f2a3a27d8d16ac9bf/6d161/preview.png 150w,\n/static/b260f65fb76abb2f2a3a27d8d16ac9bf/630fb/preview.png 300w,\n/static/b260f65fb76abb2f2a3a27d8d16ac9bf/2a4de/preview.png 600w,\n/static/b260f65fb76abb2f2a3a27d8d16ac9bf/db955/preview.png 900w,\n/static/b260f65fb76abb2f2a3a27d8d16ac9bf/df498/preview.png 1100w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}},{"node":{"frontmatter":{"path":"blog/scene-save-system","title":"Scene-aware unity Save system","tags":["tooling"],"excerpt":"Explore the implementation of a Unity save system which exploits the hierarchy of game objects","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='181'%20viewBox='0%200%20400%20181'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%208v8h150v4H0v28h11c9%200%2011%200%2010-1V25c-1-2%200-4%202-4%203%200%204%203%202%204v22c-1%201%202%201%209%201l10-1h-9c-6%200-8%200-8-2%200-1%204-2%208-1h12l9%201c1%201-3%202-6%202h-4l11%201%209-1h-6c-2%200-3-1-3-2l8-1c7%200%209%200%208%201l-2%202c-2%201%2016%201%2038%201h41v5l-62-1a1770%201770%200%200062%204c0%202%203%202-114%202H0v61h11c10%200%2011%200%2010-1V77c1-2%201-2-4-2-6%200-6%200-6-2%200-3%200-3%206-3%205%200%205%200%204-1v-6c-1-2%200-4%202-4%203%200%204%203%202%204v5c-1%202-10%202%2065%202h60v5H93c-73%200-70%200-68%201v27l1%202-1%202v10l-1%202h63c62%200%2063%200%2063%202l-1%202a99916%2099916%200%2001-62%202c62%200%2063%200%2063%202s-1%202-75%202a2766%202766%200%200075%203l-1%202H0v47h10c11%200%2013-1%2011-4v-38c-2-2%201-4%203-3%202%200%203%203%201%203v35l1%202-1%202v1c1%201%2014%202%2074%202%2072%200%2073%200%2073-2s1-2%207-1c5%200%208%201%209%202v-1l1-2%201%202c0%202%201%202%2034%202a181%20181%200%200037-1l1%201%201-1c0-2%2024-2%2025%200h1c0-2%201-2%205-2l5%201%201%201h1c0-2%202-2%208-2l8%202%2034%201c32%200%2035%200%2035-2l1-2c1%200%202%200%202%202s0%202%206%202h6V0H0v8m395%2026c1%2027%202%2027%203%200l-1-20c-2%200-2%203-2%2020M179%2022l1%203h99v-5H179v2m118%200v3h95v-5h-95v2M151%2089c0%2053%201%2067%202%2068l1-68c0-60%200-68-2-68l-1%2068M27%2040c1%201%2038%202%2040%200%203-1-1-2-20-2-17%200-20%201-20%202m0%2054c0%202%200%202%2011%202l11-1h20c1-2%200-2-2-2a217%20217%200%2000-39%200c-1-1-1-1-1%201'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":2.2058823529411766,"src":"/static/630a4491926349479b4ad8258a3e4925/2a4de/preview.png","srcSet":"/static/630a4491926349479b4ad8258a3e4925/6d161/preview.png 150w,\n/static/630a4491926349479b4ad8258a3e4925/630fb/preview.png 300w,\n/static/630a4491926349479b4ad8258a3e4925/2a4de/preview.png 600w,\n/static/630a4491926349479b4ad8258a3e4925/db955/preview.png 900w,\n/static/630a4491926349479b4ad8258a3e4925/a842e/preview.png 1174w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}},{"node":{"frontmatter":{"path":"blog/trunk-generation","title":"Procedurally generating plant stems","tags":["graphics","procGen"],"excerpt":"Improving the appearance and performance of runtime-generated branching trees","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='213'%20viewBox='0%200%20400%20213'%20preserveAspectRatio='none'%3e%3cpath%20d='M11%200l10%2017c17%2026%2027%2043%2026%2043l-2%201c-2%202-2%202%204%2016a1941%201941%200%200122%2047c3%207%203%206-2%209l-3%203%206%2024%204%2023-5%204-5%205%201%2010v11h56l1-3c1-4-5-31-7-31v-2l4-24c4-22%204-28%201-28l-2-1a1001%201001%200%200124-65c-2-1%202-8%2018-31%2019-28%2017-26%2022-26l5-1-15-1-15%201-2%203-2%203%201-4V0h-17l-1%205-7%2026c-5%2020-5%2021-8%2021l-3%202-1%203v-3l-2-3-2-4%201-6a1055%201055%200%20016-37V0H80v8l2%2022c2%2022%202%2020-2%2021-3%200-3%200-3%203v4l-1-4c-2-3-2-3-5-2-2%200-3%200-3-3l-8-26-6-23H11m200%200l10%2017c21%2031%2024%2037%2026%2048l5%2016a4506%204506%200%200113%2028c9%2019%2010%2022%209%2026-1%203%200%2011%206%2041l1%205-5%204-4%205v23h52v-5c2-17%202-17-2-21l-3-4%204-24c5-25%205-25%203-30-2-6-2-3%2011-36l10-31c1-7%205-14%2019-34l10-15c7-11%207-11%2011-11l5-1-14-1-15%201-2%203-2%203%201-4V0h-8l-9%201-7%2024c-5%2020-6%2025-9%2029l-4%204c-1%200-4-13-3-16l5-41-21-1h-21v8l2%2022c1%2013%201%2014-1%2023l-2%209-7-8c-6-8-8-13-19-52%200-2-2-2-23-2h-22m-14%2086v7h-57v32h57v7l1%207%2062-30-62-30-1%207'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.875,"src":"/static/522c4da4e1a29ee8804a9fc9ef4b4899/2a4de/before-after-comparison.png","srcSet":"/static/522c4da4e1a29ee8804a9fc9ef4b4899/6d161/before-after-comparison.png 150w,\n/static/522c4da4e1a29ee8804a9fc9ef4b4899/630fb/before-after-comparison.png 300w,\n/static/522c4da4e1a29ee8804a9fc9ef4b4899/2a4de/before-after-comparison.png 600w,\n/static/522c4da4e1a29ee8804a9fc9ef4b4899/db955/before-after-comparison.png 900w,\n/static/522c4da4e1a29ee8804a9fc9ef4b4899/5b6ba/before-after-comparison.png 1005w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}},{"node":{"frontmatter":{"path":"blog/seeb-defender-project","title":"Seeb Defender","tags":["procGen"],"excerpt":"Overview of Seeb Defender","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='208'%20viewBox='0%200%20400%20208'%20preserveAspectRatio='none'%3e%3cpath%20d='M74%201v3h-3c-1-2-4-3-6-1h-4c-3-2-4%200-4%205%200%206-3%2013-5%2012-1-1-2-1-3%201l-3%202-2%201c-1%201%203%205%205%205%201%200%202%201%202%206%201%207%206%2017%2011%2021%203%203%203%203%202%204-3%204%202%208%207%206l1%201c-1%203%200%203%202%201%203-3%208-3%2013%201%204%203%208%208%206%208s-1%203%201%205%202%205%200%203v5c1%202%200%203-2%201-1-1-3%200-3%202l-2%201-3%201c0%201%204%205%206%205v6h-3l-2-1c-1%201-2%200-3-1-2-1-2-1-4%201h-3c-2-2-5-3-5-1v3l-2-2c0-2-3-3-3-1s-3%206-6%206c-2%201-3%204%200%206%204%201%205%204%203%205-1%201-2%202-1%204%200%202%202%203%204%201l2-1c3%201%208-2%208-5h3c0%202%204%201%204%200%200-2%205-6%208-6l2%202%202%202h1c2%202%204%201%204-1l2-4v-3c-2-1-2-2-2-3%201-1%200-2-1-3-2-1%200-4%206-5%204-1%208-5%204-4h-1c2-1%201-2-1-2l1-1h-1c-4%200-4-1%201-3%203-1%204-3%201-5-2-2-2-2-3%200-2%202-3%201-3-2%200-1-1-5-3-7-4-6-4-6%200-10%204-3%204-4%201-4l-2-1c0-3-2-3-3-2h-4c-3%200-5%201-3%202l1%202-4-1c-2-2-5-3-7-3-5-1-7-4-6-8%201-5%201-4-1-4-4%201-6%200-6-2s-2-3-3-2c-3%202-5-3-3-8v-3c-2-2-1-6%202-9l2-4c1-2%2011-4%2013-2%202%201%202%201%203-1s1-2%202-1c2%203%204%202%204%200l3-3%202-2h14V6l-6-1-7-2-4-1c-2%200-2%200-1-1s-1-1-6-1-7%200-6%201m199%200v2l3%202c2%202%201%205-2%205l-1%202%202%201%201%201%202%201c4-1%204%202%200%206-4%203-5%205-2%205l1%202-2%201-2%201c-1%201%204%205%206%204%202%200%202%203%200%205-1%202-2%203-3%202-2%200-2%200-2%202l-1%204c-3%202-2%203%200%203l3%201-3%202c-3%202-3%204%202%204%204-1%205%200%206%205v4l-2%202-2%203c-3%201-4%206-1%206l1%201%202%201%202%201-1%201c-3%200-2%202%200%206%203%205%202%209-1%206-1-1-1-1-2%201%200%202-2%203-3%203-2%201-3%203%200%203l3%202c1%201%201%201-1%201l-2%202-2%203c-2%202-2%204%201%203%202%200%201%201-1%203-1%201-1%201%201%202l2%201%203%201%201%207c0%207%200%207%202%207s3-1%203-4c1-4%205-10%207-10l1%203v3l1%202h3l4-2c2%200%202%200%202-2-1-4%203-7%207-5%206%202%208%202%208%201l1-3-2-2c-4-2%205-8%2010-8l5-1c1-1%200-5-2-5v-2l2%201h5c2%200%203-2%201-4v-2c1-2%200-4-2-4l-2-1-2-3c-1-1%200-2%201-5%203-4%202-6-2-6-3%200-2-2%201-5%202-2%202-4-1-3l-3-2c-1-2-1-2-3-1-3%203-7%201-7-2h4c2%202%205-1%205-4l1-4c2-2%201-8-2-9-1%200-2-1-2-3%200-3%201-4%205-6%204-3%205-4%202-4l-2-3c0-3-2-3-4-2h-2l-4-1-3-1-5-3c-4-2-6-6-5-8l-1-2-2%202-3%202c-1%200-2%200-2%202%200%204-3%205-6%202-2-3-2-8%201-9%203%200%203-3%200-3l-2-2c0-2-1-3-2-3h-15M162%2019l-1%202-1%202-1%202c-1%202-2%202-9%202-10%200-18%202-16%205h1c0-2%202-1%202%202l-2%202-2-1v-1l-1-3v-1l-2-2c-7-4-10%203-3%209l4%203v9c0%208%200%209-2%2010-2%202-3%204-1%206%204%203%203%2016-1%2017-2%201-1%203%201%206%203%203%203%207%200%206-1%200-2%200-1%201l1%201h-3l-2%202c-3%200-2%202%202%206%203%203%204%205%205%209%200%202%204%201%206-1%203-3%203-3%2014-2l4%204c3%204%203%204%206%201l4-2%203-1c1-1%201-1%201%201l2%203c2%201%203%201%204-2%201-1%202%200%203%202l3%203%202-3%203-2-3-2-4-5c0-3-2-4-3-2-1%201-10%200-13-1h-3l-1-1%202-1h2l-2-1-3-2c0-3-2-2-4%201v2l1%201-1%201h-4c-5%201-8%201-6-2v-3c-2%200-2-2-2-3%201-2%201-2-2-3s-3-1-3-6l2-6c2-2%202-5%200-5v-2c3-2%205-1%207%201l3%203%202-2c2-2%202-2%201-3-2-3-1-3%208-3s10%200%2010-2c0-1%200-2-2-2l-3-2-2-3-1-2c0-2%200-2-2-1l-4-1c-2-3-3-2-3%200%200%203-3%206-7%208-3%201-3%201-2-1l-2-5-2-2%202-2c2%200%203-2%203-2%200-2-5-4-6-4-2%202-1-1%203-4%204-4%205-5%204-7%200-3%203-5%205-2l8%204v-2c1-3%206-3%208%200l3%202h2c2%202%203%201%203-1%200-3%206-5%208-4%202%203%203%202%205-1%202-2%200-4-3-4l-3-3c-2-4-2-4-6-2l-2%202-2-2-4-2-3-2c-1-3-1-3-2-2m59%202c0%202-3%206-5%206-3%200-11%2011-9%2014l-1%202c-1%200-1%201%201%202l2%202-2%202c-3%202-4%202-4%201l-2-1c-1-1-2%200-2%201s0%202%202%201l1%201v2c3%200%204%202%204%209l1%208-3%201c-4%202-4%203-1%207s2%2010-2%2010c-2%200-3%200-3%202l-2%203c-1%201-1%202%202%204l5%203v1c-2%202-3%205-1%206l3%204c2%205%204%205%208%200%201-2%203-3%203-2l1-1v-6l-1-1-2%201c0%202-4-4-5-7%200-2%200-2%202-1%201%201%202%202%203%201%202-1%202-1%202%202l1%202%202%202%202%201c2%200%203%202%201%202v6l2%201h3c1%202%204%201%205-1%203-4%205-4%209%201l4%205%202-3c2-2%202-2%201-4s-1-2%202-2%204-4%202-5c-2%200-2-1-1-2%202-3-1-6-4-5h-4c-1-1-2-1-5%203-4%204-12%207-13%204l-3-1-2-2-2-2-1-2-2-1c-5%200-5-4-1-9%203-4%204-4%202-6-4-3-1-5%207-6%202-1%203%200%205%202%202%203%204%204%206%201s3-3%203%200c1%203%204%203%206%201l4-2c2%200%204-3%203-5l2-2c2-1%202-1%201-3-1-4-2-4-6-2-4%203-6%204-6%202h-2l-1%203c1%202-2%201-4-2v-2l1-2c0-2%200-2%201-1l2%202c2%200%202%200%200-2-3-4-4-4-8%201s-8%205-13%201c-2-2-2-2-3-1-3%202-3%200-2-5l1-8%202-6c2-3%203-6%200-6-5-2%208-6%2014-5l5%204c2%204%204%204%206%203%202-3%206-2%208%200h2v-2l2-2c3-1%203-2%203-7l1-3c3-2%202-3-1-5h-3l-3%201c-2-1-3-1-5%202-3%204-3%204-10%204l-6-1h-1l-1%202c1%203-3%202-4-1l-1-3%201-2c0-2%200-2%201%200l4%201c2-1%202-1%200-1l-3-2c0-2-3-3-3%200m73%206c-1%202-1%202%201%203v3c-2%202-2%202-1%204%202%202%202%202-1%203l-4%201c-2%200-3%203-2%206l2%202c3%200%205%201%205%203%200%203%203%202%208-1%203-2%205-3%206-2%202%201%206-1%207-4l-1-4-1-2-1-1-1-1%202-2c5%200%204-5-2-6l-3-2c-1-2-2-2-4-1h-4c-2-3-4-2-6%201m0%2036c-4%202-4%203%200%205l2%202-4%204-4%206c-1%208%200%2010%201%209%201%200%205%203%205%205l-2%203v5c1%201%201%201-1%203-1%202-1%202%201%202s3%201%200%203v2c2%200%205-1%206-5%201-3%206-3%209-1%202%202%202%202%205%201%203-2%204-6%201-5l-2-2-1-2-1-1c0-1%201-2%203-2l3-1c0-2%203-2%203-1%201%203%205%201%206-2%202-6%200-12-3-9h-4c-2%200-2-3-1-4%203-1%202-5-1-6-1-1-2-1-2-3%201-1%200-2-1-3l-4-1-4-2a1519%201519%200%2000-10%200m63%2067l1%202v2c-2%201-4%207-2%208v4c-1%201%200%202%201%203%201%202%201%202-1%204l-2%203%204%202%201%202c-1%201%200%203%201%205v6l-2%204c1%201%200%202-1%203-1%202-1%202%201%205l2%209c1%207%202%209%203%204%201-2%202-3%205-3%203-1%204-2%202-4l-1-3c0-3-1-4-3-4-3%200-3-2%202-4%202-2%203-3%202-4l-1-2c1-1%204%202%206%208%203%205%203%205%201%207-1%203-1%204%202%203l1%202%201%203%201%202%201%202%201%202c0%202%200%203%205%203s6%200%206-2v-2l-7-7-6-12c-3-2-2-3%200-3%203%200%202-4%200-5a1038%201038%200%2001-2-2c2%200%204-5%202-6s2-7%206-8l3-3c0-3-1-5-3-4-3%201-2-3%201-5%202-2%202-2%201-4-2-3-9-5-10-3-1%203-7%200-8-3v-3c0-2-4-2-6-1-1%201-1%201-3-1-1-2-4-3-5%200m-277%202l-3%203-6%202-5%202c-2%202-4%202-4%201l-2-2c-3%200-3%202-1%204%203%203%203%205%200%206-2%200-5%204-5%206l3%201%204%202c1%204%200%208-2%208-3%200-3%204%200%206%202%202%202%202%200%204-2%201-2%202-1%204v3c-3%202-2%204%201%205%202%201%202%202%202%205%200%204%202%207%204%205l2%201%203%202c3%200%203%200%203-2%200-3%202-3%204-2%202%202%202%202%203%201%201-2%202-2%203%200h12c5%200%206-2%204-4v-3l1-2c-1-2-5-2-12%200H77c0-2-3-3-5-2-1%201-1%201-2-1s-1-3-2-2l-3-2c0-4%205-10%207-8%201%202%203%203%203%201l1-1%202-1%204%201c3%201%203%201%205-1l2-5%201-4v-2c-1-2-4-1-7%202-2%202-3%202-3%200%200-3-2-3-4-2-2%202-4%202-4-1%200-1-1-2-3-2-4-1-4-2-1-4%202-2%202-2%200-3v-3c2-1%202-2%201-3-2-2%201-3%203-2h3l3%202h6c4%203%2010%201%2010-3l1-2c2-2%200-4-3-4-2%201-3%200-4-2l-3-2h-5m-70%203c-2%201-2%202-1%203%201%202%201%203-1%208l1%203c1%200%202%201%201%202l1%204%202%204c1%202%201%202-1%204-3%201-3%203%200%206%202%201%202%201%201%203-2%201-2%202-1%204%203%202%202%203%200%205-3%201-4%205-2%207s2%202%201%204c-2%202-2%202%200%204%202%201%203%203%203%205%200%203%202%205%203%203l2-6%205-1c6%200%209%200%209-3%201-2%201-2%203-1%203%200%206-3%207-7l1-3c1-1%202-2%201-3l1-7%201-6c-1-1%200-4%202-6%202-3%201-5-2-5-3%201-3%200-5-3-3-6-11-13-16-13-4%200-9-4-8-6%200-3-6-2-8%201m105-1l-1%201-4%202-2%201c-1-2-5%200-4%201v1c-1-1-2%200-3%201v3l1%202%201%202v4c-1%202-1%202%201%204%203%204%203%208-2%2013-1%202-1%202%201%205%203%202%204%206%202%208-2%201-2%207-1%208l1%204c1%204%204%204%206%200%200-2%202-4%203-4%202-1%201-5-1-6l-2-2%202-1c2-2%203-4%201-4h-2l1%201v1c-2%201-5%200-5-1l2-1c1-1%202-2%201-3l5-1%203-2h6c1-2%204-5%206-4l1%201c-1%203%201%205%203%204%203-2%205-7%203-6-2%200-8-4-8-6l-2-2h-1c-2-2-3-1-5%202s-6%204-6%201c0-1%200-2-2-2-4%200-4-2%200-5%203-3%202-6-1-7-2%200-3-2%200-3l3%202%203%202%203-2c3-3%2010-4%2012-1h5l1-1v-2c2%201%206-5%205-6l-3-1h-3c0-1-6-2-7-1h-3c-1-1-1-1-3%201s-4%203-4%200h-1v3h-3c-2-2-1-4%200-4%203%200%203%200%202-1-4-1-5-1-5%201m45%200l-1%201-2%202-2%202c-2%201-2%202-2%205l-1%205c-1%201-1%202%201%203l3%204-3%204-3%203v4c3%200%206%205%206%2011l-1%206c-3%200-4%202-1%205l2%206c0%203%201%203%205%201h5c2%202%203%202%205%200s12-3%2014-1l3%201c3%200%203%200%203-2-1-4-4-5-10-4l-6-1-1-2-2-1-2-1-4-1h-4c-2%200-2-1-2-6v-6l4-2c7-3%208-3%2011-1%202%201%203%201%204-1%206-4%207-6%206-7%200-3-3-2-3%200-1%201-1%201-3-1-1-2-2-2-4-1a1886%201886%200%2001-9%202l-4-2v-2c0-2%200-2-1-1l-1-1v-1c-2%200-1-1%201-5%202-2%202-4%202-5l1-2%207%203c-1%201%200%204%202%204l1-1%203-1%204-1%203-2c5%200%2010-3%2010-5l-1-3-2-1-3-1c-1-1-6%200-6%202s-4%202-6%201h-2c-2%202-3%201-3-1-1-2-4-3-5%200-1%202-2%201-1-1%200-2%200-2-2-2l-3%201m168%201c0%201-2%202-10%202h-8v2l-1%203c-2%200-2%201-2%205s0%205-2%206c-2%200-4%205-3%206l2%201c3%200%204%204%202%206-2%201-2%202-1%206l1%2015c1%2012%201%2013%208%2012l6%202h3l3-1c4%200%2010-2%2012-4%204-3%204-4-2-4-4%200-6-1-7-2h-4c-4%203-7%202-7%200l-2-2c-2-1-2-1-1-3s1-4-2-4-3%200%201-3c1-2%203-3%205-3l3-3c1-3%206-2%2010%202%203%203%206%201%204-2-1-2-1-3%201-4l2-3c0-3-3-4-5-2l-2%201-4%201c-4%201-4%201-8-2l-4-4c1-1%200-3-1-3-2-2-2-2%200-4s3-3%202-4v-2c1-1%203-1%209%202h8c4%201%209%200%209-2l1-3-1-1c-1%201-2%200-3-1v-2c2%200%201-3-1-4-6-2-11-2-11%200m-88%200c-1%200-4%204-4%206l2%201c2%201%202%201%201%202-3%201-2%202%201%204s3%207%201%207c-3%200-4%200-4%202l1%203v2l-1%202v3l-1%203v4c-1%202-1%202%201%204%203%203%203%205%200%205-5%200-8-5-6-8%203-2%203-8%200-8l-4-2c-2-3-2-3-1-7%202-4%202-6-1-6-2%200-2%200-1-2%201-1%201-1-1-3l-2-4c0-2-1-3-3-5-4-2-4-2-6%200l-4%204c0%202-1%202-2%202-3-1-5%200-5%204%200%202%200%202%202%201%203-2%205-1%203%201h-3l-1%201v8l-2%202v3c-1%202%201%204%203%204%202-1%202%201%200%203l-2%205v3c-2%200%201%203%203%203%203%200%202%201-1%204-3%202-3%203%200%204l2%204c1%204%204%205%205%202l2-4c3%200%203-2%200-4-2-2-3-5-1-5%201%200%200-6-2-7-2-2-3-3%200-3%202%200%204%202%203%203v1l2%201v4c2%200%203-1%202-2l-1-5c-1-5-2-6-4-6s-2%200%200-3c3-6%203-6%204-5l2%202c1%200%202%201%202%208l1%203%201%202%201%202c1%201%202%202%201%203l1%203%201%203%202%202%201%202c-1%201%200%202%201%203s2%202%201%204c0%202%200%202%204%202l2%201%202%201%203-2c0-2%201-2%205-3s6-4%202-5c-3%200-3-3%200-6l3-4v-2c1-4%200-5-2-4s-5%200-5-1%203-2%204-1l1%201v-1l1-2c1-1-1-4-3-4-1%200-2-3-1-8l3-5c2-2%202-4-1-4-2%200-1-1%201-4%203-2%202-5-2-7l-3-4c0-2-1-2-4-1m29%205h-4c-2-2-5%201-3%203%201%202%201%202-1%203v4c3%204%203%207%200%207s-3%202-1%205c2%202%202%202%201%203l-2%201-1%203c-2%201%201%206%204%207s-1%209-4%209c-2%200-1%203%201%204%202%202%202%202%201%203-2%202-1%209%201%2011l2%203c0%203%203%200%205-3%203-6%203-6%206-3s6%200%204-2%203-3%206-1h3v-2c-2%200-1-2%201-5%202-2%203-2%207-2s4%200%204-2%200-4%202-7v-6c0-3-1-3-2-3-2%200-4-9-2-12l1-4c-1-1-4-2-4%200s-2%201-5-3c-2-4-3-5-5-5l-4-2c-2-2-5-3-5-1l-1%201-1-3c1-3-1-3-4-1m103%206c-2%201-5%207-5%209%200%203%200%203%203%202h4c2%201%203%201%204-1%203-1%204-6%202-5-2%202-4%200-3-3%200-3-2-4-5-2m-350%205c-3%203-3%204-2%205v6c-2%204-2%204%200%206%202%201%202%201%200%204-1%203-1%203%201%205%203%203%203%204%200%206s-4%204-2%206c4%203%209%201%209-4l3-3c1-1%203-3%203-5l4-3%202-1a462%20462%200%20010-5c2-1%203-3%201-3h-3c-2-1-2-1%200-4%203-4%200-10-5-10l-4-2c-1-3-4-2-7%202m253%201l-2%201c-2-1-6%204-6%208l3%205%202%206%201%204v4c-3%200-4%202-3%203%201%202%201%202-1%205-3%203-4%205-1%205%203%202%205%200%205-3s1-5%203-3h1l2%201h5c3%200%204-4%201-6l-2-2%202-2c1-1%203-2%205-1%204%201%204-10%200-13-2-1-2-3-2-4%202-5-10-12-13-8'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.9230769230769231,"src":"/static/a12abf1f287c87417148fe72477f6551/2a4de/preview.png","srcSet":"/static/a12abf1f287c87417148fe72477f6551/6d161/preview.png 150w,\n/static/a12abf1f287c87417148fe72477f6551/630fb/preview.png 300w,\n/static/a12abf1f287c87417148fe72477f6551/2a4de/preview.png 600w,\n/static/a12abf1f287c87417148fe72477f6551/db955/preview.png 900w,\n/static/a12abf1f287c87417148fe72477f6551/f3583/preview.png 1200w,\n/static/a12abf1f287c87417148fe72477f6551/7c11c/preview.png 1733w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}},{"node":{"frontmatter":{"path":"blog/overlapping-mesh-render","title":"Rendering transparent overlapping meshes only once in URP","tags":["graphics"],"excerpt":"Learn how to render overlapping transparent meshes as a single superset polygon, using stencil buffer settings in Unity URP","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='225'%20viewBox='0%200%20400%20225'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20113v112h401V0H0v113M230%205c-17%204-22%2022-15%2046l3%208-5%205c-7%207-10%2013-10%2020%200%204%201%205%203%205s2%200%202-8l1-9%2030%2017%2030%2017-28%2016-28%2015-2%206c-22%2056%2020%2095%2074%2069%207-2%208-3%2010-2%208%207%2025%209%2039%205%2052-16%2078-102%2044-144-8-10-20-16-33-17l-14-4-17-4c-7-1-8-1-14-7-17-17-32-27-48-32-6-2-18-3-22-2M39%206c-18%205-23%2022-14%2048l2%207-4%204C11%2076%209%2086%2016%2098l4%205-3%205c-5%208-5%2019-1%2025%202%204%209%2010%2013%2011l-1%208c-14%2052%2026%2086%2073%2061%206-3%206-3%209-1%2036%2024%2086-21%2089-82l1-6h-47V89h40c0-2-5-12-9-16-7-10-18-16-29-18l-14-3-18-5-8-1-10-9C81%2014%2055%202%2039%206'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.7857142857142858,"src":"/static/5c27a834c057c8278608b3d4c84bdb3b/2a4de/before-after-comparison.png","srcSet":"/static/5c27a834c057c8278608b3d4c84bdb3b/6d161/before-after-comparison.png 150w,\n/static/5c27a834c057c8278608b3d4c84bdb3b/630fb/before-after-comparison.png 300w,\n/static/5c27a834c057c8278608b3d4c84bdb3b/2a4de/before-after-comparison.png 600w,\n/static/5c27a834c057c8278608b3d4c84bdb3b/db955/before-after-comparison.png 900w,\n/static/5c27a834c057c8278608b3d4c84bdb3b/f3583/before-after-comparison.png 1200w,\n/static/5c27a834c057c8278608b3d4c84bdb3b/b14bd/before-after-comparison.png 1252w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}},{"node":{"frontmatter":{"path":"blog/cleanup-git-branches","title":"Cleaning up local GIT branches with no Remote","tags":["tooling","shell"],"excerpt":"A convenient command line tool to cleanup branches with no matching remote","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='116'%20viewBox='0%200%20400%20116'%20preserveAspectRatio='none'%3e%3cpath%20d='M171%205c-3%200-8%205-8%208%200%202-1%202-7%202-15%200-23%207-25%2021-2%2015-8%2019-24%2020-10%200-11%200-11-2l-3-5c-6-6-16-4-19%204l-1%203H60c-10%200-12%200-12-2l-3-5c-8-8-22-1-20%2010s19%2013%2022%202l1-3h13c11%200%2012%200%2013%202%201%207%209%2010%2015%208%203-1%207-6%207-8s3-2%2033-2h33l1%204c5%209%2019%208%2022-2%200-2%200-2%2013-2h12l1%203c4%2010%2018%2010%2022%200l1-3h12c17%201%2023%205%2025%2019%202%2015%209%2022%2024%2022h8l1%204c4%2010%2018%208%2021-2%201-2%202-2%2014-2%2010%200%2012%200%2012%202%200%205%208%2010%2014%209%2013-4%2011-23-3-23-4%200-11%205-11%208%200%202-2%202-12%202h-13l-1-3c-3-8-13-10-19-4l-3%205c0%202-1%202-7%202-14%200-21-6-23-20-1-8-3-13-8-16l-3-3h41l1%204c3%207%2013%209%2018%203%2011-11-5-26-16-16l-3%205c0%202-4%202-35%202-34%200-35%200-35-2%200-4-6-8-11-8s-11%204-11%208c0%202-1%202-13%202-11%200-13%200-13-2l-3-5c-6-6-17-3-19%204l-1%203h-41l3-2c5-3%208-10%209-18%202-12%208-18%2022-19h7l1%203c4%2010%2018%2010%2022%200l1-3h24l2%204c5%2010%2018%209%2021-2%204-13-16-20-22-7l-1%203h-24l-2-3c-2-6-7-8-13-7M33%2049c-9%205-6%2017%204%2017%204%200%206-1%208-5%204-7-5-16-12-12m48%200c-9%205-6%2017%204%2017%204%200%206-1%208-5%204-7-5-16-12-12m88%200c-3%202-5%207-5%2010%203%2011%2018%209%2018-2%200-7-7-11-13-8m47%202c-6%206-3%2015%206%2015s12-10%206-15c-4-4-8-4-12%200m92%200c-4%204-4%208%200%2012%204%205%2014%203%2015-4%202-9-9-15-15-8'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":3.409090909090909,"src":"/static/8932d75a4d130a64c0f6b7902432600a/c7165/preview.png","srcSet":"/static/8932d75a4d130a64c0f6b7902432600a/6d161/preview.png 150w,\n/static/8932d75a4d130a64c0f6b7902432600a/630fb/preview.png 300w,\n/static/8932d75a4d130a64c0f6b7902432600a/c7165/preview.png 417w","sizes":"(max-width: 417px) 100vw, 417px"}}}}}}]}},"pageContext":{"postPath":"blog/lindenmayer-implementation","translations":[{"hreflang":"en","path":"blog/lindenmayer-implementation/"}]}}}